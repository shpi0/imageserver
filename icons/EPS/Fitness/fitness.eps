%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D102) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 64 64
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 64 64
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
2 w
2 J
0.60000002 i
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
0 0 64 64 rc
1 0 0 -1 16 55.554672 cm
0 16 m
16 0 l
32 16 l
S
Q
0.74117649 0.45882353 0.45882353 sc
q
1 36.006714 m
1 37.107574 1.900351 38 2.9926302 38 c
61.00737 38 l
62.107868 38 63 37.100288 63 36.006714 c
63 10.993287 l
63 9.8924255 62.099648 9 61.00737 9 c
2.9926302 9 l
1.892131 9 1 9.8997126 1 10.993287 c
1 36.006714 l
h
W*
0 0 64 64 rc
-4 43 m
68 43 l
68 4 l
-4 4 l
h
f
Q
0.8392157 0.3137255 0.78039217 sc
q
3 36 m
61 36 l
61 11 l
3 11 l
3 36 l
h
W*
0 0 64 64 rc
-2 41 m
66 41 l
66 6 l
-2 6 l
h
f
Q
0.67058825 0.37254903 0.37254903 sc
q
10 41 m
20 41 l
20 38 l
10 38 l
10 41 l
h
W*
0 0 64 64 rc
5 46 m
25 46 l
25 33 l
5 33 l
h
f
Q
q
44 41 m
54 41 l
54 38 l
44 38 l
44 41 l
h
W*
0 0 64 64 rc
39 46 m
59 46 l
59 33 l
39 33 l
h
f
Q
0.847 0.847 0.847 sc
q
32 51 m
33.656853 51 35 52.343147 35 54 c
35 55.656853 33.656853 57 32 57 c
30.343145 57 29 55.656853 29 54 c
29 52.343147 30.343145 51 32 51 c
h
W*
0 0 64 64 rc
24 62 m
40 62 l
40 46 l
24 46 l
h
f
Q
1 1 1 sc
q
20.448999 30.354 m
20.476999 30.326 20.490999 30.279333 20.490999 30.214001 c
20.490999 30.129999 20.462999 29.985334 20.407 29.780001 c
20.332333 29.527998 20.290333 29.355333 20.281 29.261999 c
20.290333 29.346001 20.295 29.136002 20.295 28.632 c
20.295 28.445332 20.239 28.321667 20.127001 28.261 c
20.014999 28.200333 19.865667 28.17 19.679001 28.17 c
19.426998 28.17 19.175001 28.221333 18.923 28.323999 c
18.596333 28.454668 18.433001 28.627333 18.433001 28.841999 c
18.433001 28.907333 18.461 28.996 18.517 29.108 c
18.573 29.220001 18.605667 29.308666 18.615 29.374001 c
17.933662 28.963331 17.611666 27.978674 17.649 26.42 c
17.938335 26.494667 18.222998 26.569332 18.503 26.643999 c
18.91367 26.746668 19.249666 26.798 19.511 26.798 c
19.940336 26.798 20.248333 26.667336 20.434999 26.406 c
20.500334 26.303333 20.533001 26.200666 20.533001 26.098 c
20.533001 25.967333 20.460667 25.764336 20.316 25.489 c
20.171333 25.213665 20.099001 24.987333 20.099001 24.809999 c
20.099001 20.694 l
20.099001 20.507332 20.150333 20.243668 20.253 19.903 c
20.355667 19.562332 20.407 19.326668 20.407 19.195999 c
20.407 19.009333 20.332335 18.869333 20.183001 18.775999 c
19.940332 18.626665 19.683668 18.552 19.413 18.552 c
19.067665 18.552 18.820333 18.673332 18.671 18.916 c
18.474998 19.224001 18.377001 20.115326 18.377001 21.59 c
18.377001 21.954002 18.386333 22.630661 18.405001 23.620001 c
18.423666 24.366671 18.423666 24.851999 18.405001 25.076 c
17.677 24.879999 l
17.663 20.33 l
17.663 20.087332 17.751665 19.858667 17.929001 19.643999 c
18.106335 19.429333 18.195 19.266001 18.195 19.153999 c
18.195 19.088667 18.181 19.023335 18.153 18.958 c
18.022333 18.631332 17.747002 18.468 17.327 18.468 c
17.065666 18.468 16.818335 18.535666 16.584999 18.671 c
16.351665 18.806334 16.211666 18.971998 16.165001 19.167999 c
16.108999 19.410667 16.080999 19.718664 16.080999 20.091999 c
16.080999 24.459999 l
15.894332 24.375999 15.698335 24.348 15.493 24.375999 c
14.848997 24.460001 14.527 24.721331 14.527 25.16 c
14.527 25.290667 14.568999 25.430666 14.653 25.58 c
14.709001 25.673334 14.876999 25.743334 15.157 25.790001 c
15.586335 25.864668 15.866333 25.925333 15.997 25.972 c
16.015667 27.372007 16.136999 28.37533 16.361 28.982 c
16.669001 29.831337 17.275661 30.395998 18.181 30.676001 c
18.218334 30.685333 18.288332 30.690001 18.391001 30.690001 c
18.680334 30.690001 19.076998 30.650333 19.580999 30.570999 c
20.085003 30.491667 20.374332 30.419334 20.448999 30.354 c
h
25.601 25.356001 m
25.526333 25.356001 25.409668 25.386333 25.250999 25.447001 c
25.092333 25.507668 24.971001 25.538 24.886999 25.538 c
24.821667 25.538 24.756334 25.524 24.691 25.496 c
24.173 25.23 l
24.173 20.441999 l
24.173 20.264666 24.268665 20.036001 24.459999 19.756001 c
24.651335 19.475998 24.728334 19.252001 24.691 19.084 c
24.644333 18.878666 24.506668 18.715334 24.278 18.594 c
24.049332 18.472666 23.804335 18.412001 23.542999 18.412001 c
23.04833 18.412001 22.707668 18.63133 22.521 19.07 c
22.465 19.200666 22.432333 19.615997 22.423 20.316 c
22.413666 20.782669 22.418333 21.510662 22.437 22.5 c
22.455667 23.620005 22.465 24.329332 22.465 24.628 c
22.409 24.609333 22.315668 24.546333 22.184999 24.438999 c
22.054333 24.331667 21.923668 24.278 21.792999 24.278 c
21.690332 24.278 21.559668 24.306 21.400999 24.362 c
20.747663 24.586 20.421 24.814665 20.421 25.048 c
20.421 25.104 20.434999 25.164667 20.462999 25.23 c
20.528334 25.379333 20.649666 25.463333 20.827 25.482 c
21.097668 25.519333 21.261 25.552 21.316999 25.58 c
21.531668 25.664 21.923664 25.864666 22.493 26.181999 c
22.493 27.4 l
22.493 27.493334 22.467333 27.616999 22.416 27.771 c
22.364666 27.925001 22.339001 28.039333 22.339001 28.114 c
22.339001 28.198 22.362333 28.277332 22.409 28.351999 c
22.651669 28.725336 22.978331 28.912001 23.389 28.912001 c
23.865002 28.912001 24.200998 28.725336 24.396999 28.351999 c
24.471666 28.202665 24.509001 28.081333 24.509001 27.988001 c
24.509001 27.875999 24.453001 27.759335 24.341 27.638 c
24.229 27.516666 24.173 27.404667 24.173 27.302 c
24.173 26.615999 l
24.341002 26.690666 24.527666 26.816666 24.733 26.993999 c
24.891668 27.124668 25.026999 27.190001 25.139 27.190001 c
25.185667 27.190001 25.237 27.180666 25.292999 27.162001 c
25.881002 27.003332 26.174999 26.64867 26.174999 26.098 c
26.174999 25.920666 26.121334 25.752668 26.014 25.594 c
25.906666 25.435333 25.769001 25.356001 25.601 25.356001 c
h
33.511002 19.896 m
33.492332 19.690666 33.357002 19.515667 33.105 19.371 c
32.853001 19.226332 32.573002 19.153999 32.264999 19.153999 c
31.807665 19.153999 31.495001 19.298666 31.327 19.587999 c
31.401667 22.462681 31.317667 23.918667 31.075001 23.955999 c
30.841665 23.993334 30.272337 22.705347 29.367001 20.091999 c
29.367001 19.252001 l
29.357666 18.915998 29.266668 18.678001 29.094 18.538 c
28.921333 18.397999 28.737001 18.327999 28.541 18.327999 c
28.204998 18.327999 27.845669 18.509998 27.462999 18.874001 c
27.351 18.967335 27.290333 19.676661 27.281 21.002001 c
27.290333 20.189997 27.295 21.697313 27.295 25.524 c
27.295 25.608 27.285667 25.722332 27.267 25.867001 c
27.248333 26.011667 27.239 26.116667 27.239 26.181999 c
27.239 26.359335 27.285666 26.513332 27.379 26.643999 c
27.491001 26.812 27.668333 26.896 27.910999 26.896 c
28.163002 26.896 28.426664 26.819 28.702 26.665001 c
28.977335 26.511 29.143 26.364 29.198999 26.224001 c
29.236334 26.130667 29.254999 26.037334 29.254999 25.944 c
29.254999 25.850666 29.217667 25.720001 29.143 25.552 c
29.068333 25.383999 29.031 25.244001 29.031 25.132 c
29.031 23.200001 l
29.619003 24.450672 30.062332 25.276665 30.361 25.677999 c
30.893003 26.36867 31.494997 26.690666 32.167 26.643999 c
32.568336 26.615999 32.853001 26.24267 33.021 25.524 c
33.151669 24.982664 33.221668 24.180006 33.230999 23.115999 c
33.230999 20.596001 l
33.249668 20.530666 33.314999 20.414001 33.426998 20.246 c
33.492332 20.152666 33.520332 20.036001 33.511002 19.896 c
h
39.488998 20.469999 m
39.414333 20.115332 39.162334 19.737335 38.733002 19.336 c
38.667667 19.233334 38.411003 19.098001 37.963001 18.93 c
37.449665 18.733999 37.006336 18.65 36.632999 18.677999 c
35.932995 18.724667 35.382336 19.125996 34.980999 19.882 c
34.616997 20.582003 34.435001 21.440662 34.435001 22.458 c
34.435001 23.55934 34.640331 24.52533 35.050999 25.356001 c
35.508335 26.270672 36.119663 26.783998 36.884998 26.896 c
37.034332 26.914667 37.179001 26.924 37.319 26.924 c
38.429672 26.924 39.041 26.242674 39.153 24.879999 c
39.209 24.254663 38.96167 23.573338 38.410999 22.836 c
37.813663 22.023996 37.04834 21.454668 36.115002 21.128 c
36.217667 20.754665 36.297001 20.512001 36.353001 20.4 c
36.483665 20.166666 36.660999 20.049999 36.884998 20.049999 c
37.099667 20.049999 37.328331 20.133999 37.570999 20.302 c
37.776333 20.442001 37.916332 20.577333 37.991001 20.708 c
38.028332 20.726667 38.065666 20.831665 38.103001 21.023001 c
38.140335 21.214334 38.238331 21.351999 38.396999 21.436001 c
38.452999 21.464001 38.518333 21.478001 38.592999 21.478001 c
38.817001 21.478001 39.034 21.368334 39.243999 21.149 c
39.454002 20.929667 39.535667 20.703335 39.488998 20.469999 c
h
37.291 25.398001 m
36.917664 25.398001 36.614334 25.132002 36.381001 24.6 c
36.072998 23.890663 35.946999 23.19067 36.002998 22.5 c
36.441669 22.640001 36.847664 22.966663 37.221001 23.48 c
37.594334 23.993336 37.780998 24.450665 37.780998 24.851999 c
37.780998 25.216002 37.617668 25.398001 37.291 25.398001 c
h
45.368999 20.875999 m
45.368999 20.222664 45.13567 19.665003 44.668999 19.202999 c
44.202332 18.740997 43.651669 18.51 43.016998 18.51 c
42.615665 18.51 42.200336 18.701332 41.771 19.084 c
41.434998 19.392002 41.131668 19.769999 40.861 20.218 c
40.627666 20.610003 40.525002 20.857332 40.553001 20.959999 c
40.655666 21.193335 40.977665 21.309999 41.519001 21.309999 c
41.743 21.309999 41.920334 21.277334 42.050999 21.212 c
42.275002 21.090666 42.401001 20.936668 42.429001 20.75 c
42.457001 20.535332 42.503666 20.4 42.569 20.344 c
42.764999 20.045332 42.942333 19.896 43.101002 19.896 c
43.222336 19.896 43.336666 19.977665 43.444 20.141001 c
43.551334 20.304335 43.605 20.497999 43.605 20.722 c
43.605 20.862001 43.581665 21.001999 43.535 21.142 c
43.488335 21.282001 43.236336 21.496666 42.778999 21.785999 c
42.228329 22.131334 41.836334 22.434666 41.603001 22.695999 c
41.201664 23.144003 41.000999 23.666664 41.000999 24.264 c
41.000999 24.964003 41.206333 25.577663 41.617001 26.105 c
42.027668 26.632336 42.550331 26.896 43.185001 26.896 c
43.838337 26.896 44.337666 26.648668 44.682999 26.153999 c
44.963001 25.752665 45.079666 25.346668 45.033001 24.936001 c
45.135666 24.823999 45.187 24.637335 45.187 24.375999 c
45.187 24.095999 45.084335 23.858002 44.879002 23.662001 c
44.673664 23.466 44.463669 23.368 44.249001 23.368 c
43.931664 23.368 43.656334 23.577997 43.423 23.997999 c
43.357666 24.110001 43.325001 24.259333 43.325001 24.445999 c
43.325001 24.530001 43.332001 24.649 43.346001 24.802999 c
43.360001 24.957001 43.367001 25.066666 43.367001 25.132 c
43.367001 25.374668 43.278336 25.496 43.101002 25.496 c
42.830334 25.496 42.695 25.230003 42.695 24.698 c
42.695 24.156664 42.87233 23.722668 43.227001 23.396 c
43.367001 23.265333 43.67033 23.078669 44.137001 22.836 c
44.538334 22.630665 44.822998 22.420668 44.991001 22.205999 c
45.243 21.879332 45.368999 21.436003 45.368999 20.875999 c
h
51.291 20.875999 m
51.291 20.222664 51.057671 19.665003 50.591 19.202999 c
50.124332 18.740997 49.573669 18.51 48.938999 18.51 c
48.537666 18.51 48.122337 18.701332 47.693001 19.084 c
47.356998 19.392002 47.053669 19.769999 46.783001 20.218 c
46.549667 20.610003 46.446999 20.857332 46.474998 20.959999 c
46.577667 21.193335 46.899666 21.309999 47.441002 21.309999 c
47.665001 21.309999 47.842331 21.277334 47.973 21.212 c
48.197002 21.090666 48.322998 20.936668 48.351002 20.75 c
48.379002 20.535332 48.425667 20.4 48.491001 20.344 c
48.687 20.045332 48.864334 19.896 49.022999 19.896 c
49.144333 19.896 49.258667 19.977665 49.366001 20.141001 c
49.473335 20.304335 49.527 20.497999 49.527 20.722 c
49.527 20.862001 49.503666 21.001999 49.457001 21.142 c
49.410332 21.282001 49.158337 21.496666 48.701 21.785999 c
48.15033 22.131334 47.758335 22.434666 47.525002 22.695999 c
47.123665 23.144003 46.923 23.666664 46.923 24.264 c
46.923 24.964003 47.12833 25.577663 47.539001 26.105 c
47.949669 26.632336 48.472332 26.896 49.106998 26.896 c
49.760338 26.896 50.259666 26.648668 50.605 26.153999 c
50.885002 25.752665 51.001667 25.346668 50.955002 24.936001 c
51.057667 24.823999 51.109001 24.637335 51.109001 24.375999 c
51.109001 24.095999 51.006336 23.858002 50.800999 23.662001 c
50.595665 23.466 50.385666 23.368 50.171001 23.368 c
49.853664 23.368 49.578335 23.577997 49.345001 23.997999 c
49.279667 24.110001 49.247002 24.259333 49.247002 24.445999 c
49.247002 24.530001 49.254002 24.649 49.268002 24.802999 c
49.282001 24.957001 49.289001 25.066666 49.289001 25.132 c
49.289001 25.374668 49.200333 25.496 49.022999 25.496 c
48.752331 25.496 48.617001 25.230003 48.617001 24.698 c
48.617001 24.156664 48.794331 23.722668 49.148998 23.396 c
49.289001 23.265333 49.592331 23.078669 50.058998 22.836 c
50.460335 22.630665 50.744999 22.420668 50.912998 22.205999 c
51.165001 21.879332 51.291 21.436003 51.291 20.875999 c
h
W*
0 0 64 64 rc
9.5270004 35.689999 m
56.291 35.689999 l
56.291 13.328 l
9.5270004 13.328 l
h
f
ep
end
%%Trailer
%%EOF
