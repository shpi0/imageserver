%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D102) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 64 64
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 64 64
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.37032434 0.65318644 1 sc
q
33 0 m
46.254833 0 57 10.745166 57 24 c
57 37.254833 46.254833 48 33 48 c
19.745167 48 9 37.254833 9 24 c
9 10.745166 19.745167 0 33 0 c
h
W*
0 0 64 64 rc
4 53 m
62 53 l
62 -5 l
4 -5 l
h
f
Q
q
0 0 64 64 rc
21 0 0 16 34 27 cm
BI
/Width 63
/Height 48
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
HsW`N?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg1W;h=TqPMC,bhMNA]D,^1s(nk<g?QNS
BO7V:?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuLS8rKG%k]$g**jQcO(%B7MA?Dmg0VuL2)s2*U1s'/m.
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg3W;hCWqPVI,ceRpSkS)%jmTugk?Dmg0VuL)$s/"$@rVjt>;dQC%?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s),%=
Ped"*eF;GYlJq(Dj6#T7W;g2%s'DW'?Dmg0VuM^ks7Q34s$pCns'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL2)s+7cVWlt"\h<`YT(4<Oe?Dmg0VuL)$s'DW'
?DmgI[/]=[d/Q:9VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuLY<
rKkCp^=;W2jlstP)4JJ9?Dmg0VuL)$s'DW'?Dmg0VuLG3s4$5\s#",\s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s2Wd[_WVuMdI:J?s'DW'?Dmg0VuL)$s'DW'?Dmg2W;kB1
f)IU6VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuPE-lb_j-f\l(%
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg:XT.JSg&Ep9VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg1W;l&Dl+cF(D6EhDVuL)$s'DW'?Dmg0VuL)$s'DW'?DmgI[/]gph#B-9VuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg@YPl,t,)j20?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg]^]492hu>H<VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?DmgQ\,*c$,-/oY?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuNU=hu>H<VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmgb^A#;(--Fs0?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s2*UOs"[oYs'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuNF0oXsB9jQ>]9WW-;&s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'@B':\lK/%$?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'Z-MpNkU:hdqHg*"?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuLS9s6TCAs"[oYs'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuOWbn%%X4ZHr)JVuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?DmgN\,Z7#li/_HVuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?DmhOhX%]7/%O*tA#]K7VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'P/I>!rpKeA?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'ioTF2kU=O*mV&^$?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s0'o>
s"@]Vs'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg;XT#?c.+R5AENo@IVuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'_l+kjn9D04(RV?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuM(Mql8j+hW*mM[ea=.s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'Pf<1m04(RV
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuMXepo!=%jQ>]d^%bp3s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'hX0t804(RV?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuN4'oqLXml(>ug?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?DmgY^%D=[?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s-1=mioTI!kT@(TnmJEr?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'd,k$%4'nib?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'r)/MS&Yn
ddc;XlDNhf_:J'dWr?>&s'DW'?Dmg0VuL)$s'DW'?DmgM[f?=*qYrriVuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'A#]Ka]D/k_n_rTpXlpbNh!Js]rEcE%?Dmg0
VuL)$s'DW'?Dmg0VuOZkqYs8rVuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'hu-Lq<Aid.-&TlEf[og#;7@Zhn(,s'DW'?Dmg0VuL)$s'DW'E3]H=
r;HXr?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg3WW.acq6eT>hrO(5kS`@@l@leE?Dmg0VuL)$s'DW'?Dmg0VuO0UrVp52VuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg3WW.^aq6\K<hrO(;kSiXIl'B0Z?Dmg0VuL)$s'DW'?Dmg:XT.qgs'K*1s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?DmgZ]D/r#'WB1G?Dmg0VuL)$s'DW'?Dmh$ci7H\VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'@&X+[ip4/=&\6?ZA#]K7VuL)$s'DW'A#]K;?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'VoeP=kRP_fmV/d%?Dmg0VuL)$s'f<4s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuLeBr3PSpak?)gVuL)$s'DW'AR;;7?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'A#]Kc
]D.i4oq'.qTuQ_k_Y/GeqIQ]+?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'`n9^fkR6A2
l<^Cg?Dmg0VuJ2PVuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?`="-c19fRlL!d_l.+\X][QAE
a7P2"phm;6?Dmg0VuL)$s'DW'?Dmg0VuL)$s,k(jZfh[.XSuP(s'DW',@7;J?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuNpEo%3(Ddba>jbO^=qqI-?&?Dmg0VuL)$s'r)/i8j13kQlF>qd-3#?DmfG?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuMUcprhk5hW*n,cLHRuq-^0$?Dmh-cLSF-#`?7h?Dmg0VuIlG
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s1["O_WV9\j6Nbio96ua[ce!c_t@?6s'DW'+C:uG?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'B<2$nk37H\mcXqXbk#/=s'DW'*F>ZD?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'LV*A5kj.F<^!uOXVuL)$ruGFDs'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s-1@oJ`uF`#gV5m?Dmg0
VuIcDVuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuNF0omu>mkQp&*l<^Cg?DmfD?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmh)bk$DLki`1]Wr?>&ruGFDs'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s1$JHJ`u=]"a76M
?DmfD?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?DmhAfC+:Ski`2*](o[1ruGFDs'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s3KNgJ`u=]"dd+"?DmfD?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?DmhOh<]^Vki`2Lb4Ar;
ruGFDs'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s306bJ`u=]"hE(N?DmfD?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?DmhDf^==Ski`2mg?i4EruGFDs'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s1m1RJ`u=]"l//(?DmgR

~> %APLeod
EI
12 0 0 16 15 27 cm
BI
/Width 36
/Height 48
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
k5S93lMk\'s,"A_a4TgH_Y.`Hra)N&?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'l2M..h>^o_s'DW'YKcY8kX"Cpl,;3BPem*,X8ZG's'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'n,F!urr8h?s'DW'?Dmg0VuP6&m.0@"
jlbmCeaJU6pLUB(?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s761%p%eWH
_#I`=s'DW'?Dmg?Y5RMH0B;3Z][QA/^%c*;s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s7QC+kOSXs[/XI1s'DW'?Dmg0VuMmopYG$[ioTF7dd`.)pgL0%?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmhurtj2Js(JM6?Dmg0VuL)$s'DW'?Dmh2d.,WL*T,rCZd8/p\bTX3s'DW'?Dmg0VuL)$s'DW'?Dmi#
ru0DMs'Vf*?Dmg0VuL)$s'DW'?Dmg0VuPH/lc\K+h;de)cLQOrqHp0#?Dmg0VuL)$s8N$:kOSXdXT)V)
s'DW'?Dmg0VuL)$s'DW'F0YYXkR6/)lZ09.?Dmg0VuIe1q>YZGs'DW'?Dmg0VuL)$s'DW'?Dmg0VuN+#
p:TSpICAuYVuL)$ruI$4s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s1HhM]]]WO\,'F/s'DW'*F>ZD?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'M](hW*n6kQldMqHg*"?DmfA?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'HF3R[
kQljPq-L!!?DmfA?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'T#LB5kQlsTq-L!!?DmfA?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'_Ue1dkQm!Vpg0lu?DmfA?Dmg0VuL)$s'DW'?Dmg0VuL)$s'_o,ioTF8kQm*Zpg0lu
?Dmf>?Dmg0VuL)$s'DW'?Dmg0VuL)$s+%TT[ce!U^%bp3s'DW'(LF$>?Dmg0VuL)$s'DW'?Dmg0VuNU7
oX<rhDQj"FVuL)$rtf">s'DW'?Dmg0VuL)$s'DW'?DmhFg$ZE7$d.2j?Dmg0VuL)$rtf">s'DW'?Dmg0
VuL)$s'DW'AZGalkNTP@$_,',?Dmg0VuL)$rtJe;s'DW'?Dmg0VuL)$s'DW'LV!;lkRQe>l#!U%?Dmg0
VuL)$rtJe;s'DW'?Dmg0VuL)$s'DW'X3C1GkRPVbmTugk?Dmg0VuL)$rtJe;s'DW'?Dmg0VuL)$s'DW'
ce\!!kRNopp0OZs?Dmg0VuL)$rtJe;s'DW'?Dmg0VuL)$s(\\8kih9DkRlq=l"I0t?Dmg0VuL)$s'DW'
&RMC8?Dmg0VuL)$s'DW'NP>1ukRkDTn6W$m?Dmg0VuL)$s'DW'&RMC8?Dmg0VuL)$s'DW'ZHr*PkRiQ\
q-L!!?Dmg0VuL)$s'DW'&RMC8?Dmg0VuL)$s'DW'f&5o-kS2_/lX-Ri?Dmg0VuL)$s'DW'?Dmf5?Dmg0
VuL)$s'DW'E3T;OkS0o9oNnHq?Dmg0VuL)$s'DW'?Dmf5?Dmg0VuL)$s'DW'Pem+*kS<?%Yl%h*s'DW'
?Dmg0VuL)$s'DW'%UQ(5?Dmg0VuL)$s1$MI]]^0MfButCs'DW'?Dmg0VuL)$s'DW'?Dmf5?Dmg0VuL)$
s'DW'guI_5kSK&epg0lu?Dmg0VuL)$s'DW'?Dmg0VuI-2VuL)$s'DW'G-h+ZkSht.lsH[j?Dmg0VuL)$
s'DW'?Dmg0VuL)$rsN/2s'DW'?Dmgl_tC\+)OJ>7?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'$XTb2?Dmg0
VuOK\n%\',hW*m3WrHD's'DW'?Dmg0VuL)$s'DW'?Dmg0VuI-2VuL)$s'M`)iT9@>kT-PBo3S?p?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'#[XG/?DmgN[JIZ%+Q_eNCp!YBVuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuI$/VuL)$s.IC(^ZZf6a7N]9s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'#[XG/?DmhAfC$N>,Jr%#
?`3p1VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$rs2r/s'r)/jQ>^GkU+C(mV/d%?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$rrl`,s+7cVaQP28jlr8Poj=Ws?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'"^\,,VoePXkV_A]lFk^:Ped!.Xo2S(s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'"^\,,bM)@>kX"=ml-eDSX3:*d\G9R4s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'"_Xn8kNM10k[N`<l+#13X3:+0aRl.Fop`nmPem*M](gZ\qJib;
Auko;VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuL)$rrS%hq#9Jgg#;7E[JO:.s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuLP7bjrp1m;&j&?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg=V9/@>WrHD's'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'CL3q=?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s(br=s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuLO=VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'?DmgR
~> %APLeod
EI
21 0 0 19 34 8 cm
BI
/Width 63
/Height 57
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
*F>ZD?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'[*S8nkiV(2l!p^m*F>ZD?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'VoeO]kiM"0Ej>N_?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmgl_tJZFjlcbt\G@4PVuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuMRapjqYmkQS39nmA<p*F>ZD?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'GI%*s
kj.F<UW<"5VuL)$ruGFDs'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s/4!1J`uXf%d3'?QGN9$VuL)$s'DW'
*F>ZD?Dmg0VuL)$s'DW'?Dmg0VuL)$s)kXFk3(u[kk+'NjQ>]a]_Gg2s'DW'?Dmg0VuIZAVuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmh9e*qqPo]R"Jjm%E,qHg*"?Dmg0VuL)$s'DW')IB?A?Dmg0VuL)$s'DW'?Dmg0
VuLtIqrm8.J`ujl(Yds8GI.0QVuL)$s'DW'?Dmg0VuL)$rtf">s'DW'?Dmg0VuL)$s'DW'?Dmh:eF8%Q
pZNOFhs><drEcE%?Dmg0VuL)$s'DW'?Dmg0VuIQ>VuL)$s'DW'?Dmg0VuL)$s*1mIkih8^kkaK`bhMN"
Xo;Y)s'DW'?Dmg0VuL)$s'DW'?Dmg0VuIH;VuL)$s'DW'?Dmg0VuL)$s0BuAJ`uso+PbuAA?,W8VuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuIH;VuL)$s'DW'?Dmg0VuL)$s4H8qJ`uso+Pu/D?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuI?8VuL)$s'DW'?Dmg0VuLhCr.4)+kTK!Ll!C:f?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmf8?Dmg0VuL)$s'DW'?Dmgk_tJZFo]R<(W;g2%s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
rt/S8s'DW'?Dmg0VuL)$s1d(PJ`uai*Fu2M?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmf8?Dmg0VuL)$
s'DW'?`3q`jm%E\o]R<.X8ZG's'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$rsiA5s'DW'?Dmg0VuL,%s+0D(
kT+?<ra)N&?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'&RMC8?Dmg0VuL)$s'DW'jlYfYkk+'ZAuko;VuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuI?8VuL)$s'DW'?Dmg0VuPE-l[e9lkT+36s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'&RMC8?Dmg0VuL)$s'DW'VTJF\kk+'Z@]BB6VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuIH;VuL)$s'DW'?Dmg0VuLb@r9*8-J`uso+QMVK?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuIQ>
VuL)$s'DW'?Dmg0VuL)$s,t1lkih8^kl']ff&5n$VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$ru,4A
s'DW'?Dmg0VuL)$s'DW'?Dmgi_Y3*Rl%/%AkfDHF?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuIcD
VuL)$s'DW'?Dmg0VuL)$s'DW'?DmgCYl)2an:TpI]$p.TVuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s!_9Ps'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'Dm0,+_Y1dqn)NNoO6@^gbjo)<s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'11$mY?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'A#fQ`](rJP
o$Q:[R-5Zb`q<Z9s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'5$k/e?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'C9@Jo^%eeUo$Q:[V!&q`^\;'4s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'7p`+n?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'E3T;Icgg2]l)j.lKXpnbVuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s%Qgts'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?DmgF
Z2D2^nEB*#ZfiNSZM\%,s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW':gU("?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'HF3RffC-96
,MhDF?`3p1VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s&37%s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?`3q9e*t$6,Ic(j
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s&NI(s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg4WW0ujm_@s1NkY6o
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'=^J$+?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s)5+>jlYgHkU,KV
l"R6u?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s&i[+s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s/jN9
`TSYkg?i4Es'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuKn+VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuLb@r5IkHUW<"5VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg.?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuPW6lH&09I'riXVuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg.?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuO]en&soDgu@U+VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg5
WW-40VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s/4!1bNLCVbjo)<s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuN[@s'/m.s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'NP5,4kUbTNl=d9u?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s(JM6o_JMl?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuMCZq9J1PQ,30#
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmh2f)>VR?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuMXepsJ:UbhMMlVuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?DmgBZ2aXtrVp,/VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s,t1leEAF?jQ^imr*H<$?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s23^is'/m.s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'R`"gMkUtuZl%$8>?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'Ha`tQrqcY"?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuNsFo%<.Wl&NIO?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?DmhNk4em\?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuOonmbR(ZkNM0!_t@?6s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s+e;[s'/m.s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'gu@VWkV;#VlA)tH?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuPW@o`&'#VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL;-rnuupdba>2Z2@q+s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'Pf<1m=^J$+?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'GI.2,kVU$(
n7AX!?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL2(s69.Fs&i[+s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s,+G`kNFefUr`17VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmh-e*d6=?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmgo`V&T]3o]8dMS&XiVuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmgd_uK`8mf-ErVuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuNsF
o'bd'`RjNuYl%h*s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuM.Rs7lKW
s&i[+s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s2*@Up#nQqj6DiDpKjct?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'Cp*g)o]Z<X?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$
s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?DmhRhsC7(5j.=p
Yg2fSXo;Y)s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'_o,g?Rf"
=^J$+?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'M`)k3)".kWlr6mrl#7?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s2*UOs*n@Qs'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL_?rP[=VICAuY
VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?De_A?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'V9[uu
IpT&Q?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'
?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0VuL)$s'DW'?Dmg0
V],SAVuL)$s'DW'?Dmg0VuL)$s'DW'Mnf;jrnma+
~> %APLeod
EI
Q
0.34901148 0.34901148 0.34901148 sc
q
49 42 m
49 54 l
17 54 l
17 42 l
17 40.343147 24.163445 39 33 39 c
41.836555 39 49 40.343147 49 42 c
h
W*
0 0 64 64 rc
12 59 m
54 59 l
54 34 l
12 34 l
h
f
Q
0.52420813 0.52420813 0.52420813 sc
q
9 54.093388 m
33.718334 63 l
58.019573 54.093388 l
33.718334 46.699364 l
9 54.093388 l
h
W*
0 0 64 64 rc
4 68 m
63.019573 68 l
63.019573 41.699364 l
4 41.699364 l
h
f
Q
0.94363838 0.74317777 0.15254445 sc
q
32.581814 55.018528 m
32.19862 56.981472 l
15 53.624043 l
15 29.904205 l
17 29.904205 l
17 51.976719 l
32.581814 55.018528 l
h
W
0 0 64 64 rc
10 61.981472 m
37.581814 61.981472 l
37.581814 24.904205 l
10 24.904205 l
h
f
Q
1 0.27539581 0.17155935 sc
q
17.002226 28.67835 m
17.849161 27.041985 l
19.625359 27.96129 l
17.014639 33.00547 l
15.003837 32.9972 l
12.393117 27.95302 l
14.169313 27.033712 l
15.002195 28.642927 l
15 26.001043 l
17 26 l
17.002226 28.67835 l
h
W
0 0 64 64 rc
7.393117 38.00547 m
24.625359 38.00547 l
24.625359 21 l
7.393117 21 l
h
f
Q
0.90994364 0.90994364 0.90994364 sc
q
22.371145 5.9250154 m
23.201818 15.098913 l
16.528334 20.207769 l
16.528334 20.207769 16.142925 24.296169 20.986813 24.873919 c
25.830702 25.451666 28.815065 22.455624 28.815065 22.455624 c
28.815065 22.455624 30.738094 19.47971 30.020927 17.458082 c
29.303761 15.436455 27.44825 12.409081 27.44825 12.409081 c
27.44825 12.409081 27.301065 8.9698172 26.04348 7.363729 c
24.785892 5.7576413 22.371145 5.9250154 22.371145 5.9250154 c
h
W*
0 0 64 64 rc
11.52107 29.947895 m
35.181137 29.947895 l
35.181137 0.92003638 l
11.52107 0.92003638 l
h
f
ep
end
%%Trailer
%%EOF
