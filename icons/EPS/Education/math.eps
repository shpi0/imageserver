%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D102) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 64 64
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 64 64
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.41960785 0.41960785 0.41960785 sc
q
2 50.004494 m
2 51.658867 3.3373098 53 4.9959373 53 c
59.004063 53 l
60.658672 53 62 51.657532 62 50.004494 c
62 14 l
2 14 l
2 50.004494 l
h
W*
0 0 64 64 rc
-3 58 m
67 58 l
67 9 l
-3 9 l
h
f
Q
0.85490197 0.84313726 0.11764706 sc
q
22.379999 39.636002 m
22.103998 39.407997 21.750002 39.293999 21.318001 39.293999 c
21.137999 39.293999 20.928001 39.312 20.688 39.348 c
20.339998 39.239998 20.028002 39.132 19.752001 39.023998 c
19.079996 38.771999 18.636002 38.556 18.42 38.375999 c
18.348 37.127995 18.348 35.700008 18.42 34.091999 c
18.492001 34.139999 18.671999 34.188 18.959999 34.236 c
19.104 34.488003 19.349998 34.613998 19.698 34.613998 c
20.046001 34.613998 20.450998 34.446003 20.913 34.110001 c
21.375002 33.773998 21.606001 33.444 21.606001 33.119999 c
21.606001 33.035999 21.587999 32.952 21.552 32.868 c
21.407999 32.507999 21.186001 32.279999 20.886 32.183998 c
20.705999 32.124001 20.442001 32.109001 20.094 32.139 c
19.745998 32.168999 19.524 32.16 19.427999 32.112 c
19.151999 31.98 18.816002 31.824001 18.42 31.643999 c
18.42 30.563995 18.455999 29.868002 18.528 29.556 c
19.032003 29.676001 19.451998 29.82 19.788 29.988001 c
19.848 30.072001 19.907999 30.15 19.968 30.222 c
20.088001 30.354 20.303999 30.408001 20.615999 30.384001 c
20.952002 30.360001 21.299997 30.168001 21.66 29.808001 c
22.020002 29.447998 22.200001 29.082003 22.200001 28.709999 c
22.200001 28.385998 22.062002 28.146 21.785999 27.99 c
21.509998 27.834 21.048004 27.780001 20.4 27.827999 c
18.708 26.982 l
18.636 26.945999 18.480001 26.826 18.24 26.622 c
18.059999 26.466 17.898001 26.388 17.754 26.388 c
17.705999 26.388 17.652 26.393999 17.591999 26.406 c
16.955997 26.598001 16.380003 27.095997 15.864 27.9 c
15.828 27.960001 15.81 28.032 15.81 28.115999 c
15.81 28.152 15.875999 28.391998 16.007999 28.836 c
15.875999 32.328018 15.851999 36.047981 15.936 39.995998 c
15.851999 40.116001 15.81 40.236 15.81 40.355999 c
15.81 40.752003 16.175997 41.003998 16.908001 41.112 c
17.064001 41.136002 17.261999 41.094002 17.502001 40.986 c
17.658001 40.902 17.807999 40.824001 17.952 40.751999 c
20.112 41.436001 l
20.16 41.448002 20.297998 41.52 20.525999 41.652 c
20.682001 41.748001 20.862 41.796001 21.066 41.796001 c
21.162001 41.796001 21.275999 41.784 21.408001 41.759998 c
21.672001 41.711998 21.932999 41.505001 22.191 41.139 c
22.449001 40.772999 22.577999 40.428001 22.577999 40.104 c
22.577999 39.899998 22.512001 39.743999 22.379999 39.636002 c
h
29.040001 35.243999 m
28.944 35.16 28.83 35.118 28.698 35.118 c
28.638 35.118 28.500002 35.141998 28.284 35.189999 c
28.067999 35.237999 27.900002 35.243999 27.780001 35.208 c
25.836 34.740002 l
25.727999 34.716 25.542002 34.644001 25.278 34.523998 c
25.073999 34.439999 24.906 34.397999 24.774 34.397999 c
24.473999 34.397999 24.210001 34.535999 23.982 34.812 c
23.754 35.088001 23.639999 35.375999 23.639999 35.675999 c
23.639999 35.916 23.712 36.119999 23.856001 36.287998 c
23.903999 36.335999 24.089998 36.360001 24.414 36.360001 c
24.810001 36.360001 25.091999 36.383999 25.26 36.431999 c
27.312 36.972 l
27.852003 37.116001 28.181999 37.188 28.302 37.188 c
28.458 37.188 28.595999 37.152 28.716 37.080002 c
29.088001 36.863998 29.274 36.468002 29.274 35.891998 c
29.274 35.591999 29.196001 35.375999 29.040001 35.243999 c
h
28.823999 32.400002 m
28.727999 32.315998 28.614 32.273998 28.482 32.273998 c
28.421999 32.273998 28.284 32.298 28.068001 32.346001 c
27.851999 32.394001 27.684 32.400002 27.563999 32.363998 c
25.620001 31.896 l
25.511999 31.872 25.326002 31.800001 25.062 31.68 c
24.858 31.595999 24.690001 31.554001 24.558001 31.554001 c
24.257999 31.554001 23.994001 31.691999 23.766001 31.968 c
23.537998 32.243999 23.424 32.531998 23.424 32.832001 c
23.424 33.072002 23.495998 33.276001 23.639999 33.444 c
23.688 33.492001 23.873999 33.515999 24.198 33.515999 c
24.594002 33.515999 24.875999 33.540001 25.044001 33.588001 c
27.096001 34.127998 l
27.636003 34.271999 27.966 34.344002 28.086 34.344002 c
28.242001 34.344002 28.379999 34.307999 28.5 34.236 c
28.872002 34.02 29.058001 33.624004 29.058001 33.048 c
29.058001 32.747997 28.980001 32.532001 28.823999 32.400002 c
h
34.943916 32.709507 m
34.943974 32.710644 34.944 32.709476 34.944 32.706001 c
34.943974 32.707169 34.943943 32.70834 34.943916 32.709507 c
34.943916 32.709507 l
h
34.943916 32.709507 m
34.931831 33.211197 34.895863 33.468029 34.835999 33.48 c
34.559998 33.023998 34.32 32.586002 34.116001 32.166 c
33.623997 31.157995 33.341999 30.318003 33.27 29.646 c
33.209999 29.501999 33.203999 29.220001 33.251999 28.799999 c
33.299999 28.439999 33.246002 28.194 33.09 28.062 c
32.933998 27.929998 32.724003 27.864 32.459999 27.864 c
32.171997 27.864 31.881001 27.945 31.587 28.107 c
31.292999 28.269001 31.08 28.452 30.948 28.656 c
30.755999 28.956001 30.648001 29.831993 30.624001 31.284 c
30.624001 35.532001 l
30.612 35.652 30.564001 35.82 30.48 36.035999 c
30.396 36.252003 30.354 36.413998 30.354 36.521999 c
30.354 36.630001 30.383999 36.731998 30.444 36.827999 c
30.6 37.068001 30.995996 37.188 31.632 37.188 c
32.412003 37.188 32.880001 36.996002 33.035999 36.612 c
33.071999 36.528 33.09 36.444 33.09 36.360001 c
33.09 36.251999 33.033001 36.096001 32.918999 35.891998 c
32.805 35.688 32.748001 35.52 32.748001 35.388 c
32.748001 33.335999 l
33.108002 34.092003 33.581997 35.051994 34.169998 36.216 c
34.242001 36.372002 34.311001 36.528 34.376999 36.683998 c
34.443001 36.84 34.542 36.978001 34.674 37.098 c
34.806 37.218002 35.028 37.278 35.34 37.278 c
35.820004 37.278 36.302998 37.170002 36.789001 36.953999 c
37.275002 36.737999 37.523998 36.480003 37.535999 36.18 c
37.548 35.868 37.503002 35.631001 37.401001 35.469002 c
37.299 35.306999 37.248001 35.172001 37.248001 35.063999 c
37.212002 31.176001 l
37.403999 31.608002 37.751999 32.627991 38.256001 34.236 c
38.652 35.460007 38.952 36.144001 39.155998 36.287998 c
39.420002 36.48 39.809998 36.576 40.326 36.576 c
41.286003 36.576 41.784 36.300003 41.82 35.748001 c
41.807999 34.283993 41.807999 31.836018 41.82 28.403999 c
41.82 28.271999 41.939999 28.113001 42.18 27.927 c
42.420002 27.740999 42.540001 27.546001 42.540001 27.341999 c
42.540001 27.246 42.515999 27.132 42.467999 27 c
42.312 26.555998 41.958004 26.334 41.405998 26.334 c
40.709995 26.334 40.194 26.573997 39.858002 27.054001 c
39.677998 27.318001 39.588001 28.223991 39.588001 29.771999 c
39.588001 30.726 l
39.599998 31.146002 39.605999 31.439999 39.605999 31.608 c
39.605999 32.448006 39.563999 32.880001 39.48 32.903999 c
39.299999 32.976002 38.688004 31.296017 37.644001 27.864 c
37.644001 27.851999 37.619999 27.564003 37.571999 27 c
37.548 26.651999 37.428001 26.418001 37.212002 26.298 c
37.056 26.213999 36.882 26.172001 36.689999 26.172001 c
36.341999 26.172001 36.006001 26.285999 35.681999 26.514 c
35.357998 26.742001 35.153999 27.011999 35.07 27.323999 c
34.950001 27.768002 34.896 28.643993 34.908001 29.952 c
34.93084 31.767878 34.942814 32.687038 34.943916 32.709507 c
34.943916 32.709507 l
h
49.362 29.988001 m
49.349998 29.723999 49.236 29.454 49.02 29.177999 c
48.683998 28.781998 48.468002 28.482 48.372002 28.278 c
47.615997 27.125994 46.836002 26.549999 46.032001 26.549999 c
45.083996 26.549999 44.346004 27.029995 43.818001 27.99 c
43.349998 28.866005 43.116001 29.969994 43.116001 31.302 c
43.116001 32.826008 43.403996 34.151993 43.98 35.279999 c
44.616005 36.528008 45.437996 37.152 46.445999 37.152 c
47.238003 37.152 47.879997 36.714005 48.372002 35.838001 c
48.780003 35.093998 48.984001 34.284004 48.984001 33.408001 c
48.984001 33.167999 48.966 32.958 48.93 32.778 c
48.846001 32.369999 48.504002 32.166 47.903999 32.166 c
47.435997 32.166 47.076 32.298 46.824001 32.562 c
46.703999 32.694 46.644001 32.999996 46.644001 33.48 c
46.644001 33.600002 46.650002 33.773998 46.661999 34.001999 c
46.661999 34.523998 l
46.661999 35.064003 46.566002 35.334 46.374001 35.334 c
46.169998 35.334 45.954002 34.743008 45.726002 33.561001 c
45.497997 32.378994 45.383999 31.272005 45.383999 30.24 c
45.383999 29.039993 45.563999 28.440001 45.924 28.440001 c
46.392002 28.440001 46.739998 28.817997 46.967999 29.573999 c
47.063999 29.682001 47.118 29.897999 47.130001 30.222 c
47.130001 30.510002 47.202 30.698999 47.346001 30.789 c
47.490002 30.879 47.699997 30.924 47.976002 30.924 c
48.336002 30.924 48.647999 30.846001 48.911999 30.690001 c
49.224003 30.509998 49.374001 30.276001 49.362 29.988001 c
h
W*
0 0 64 64 rc
10.81 46.796001 m
54.362667 46.796001 l
54.362667 21.172001 l
10.81 21.172001 l
h
f
Q
q
55.32 37.23 m
55.426666 37.083332 55.48 36.940002 55.48 36.799999 c
55.48 36.606667 55.383335 36.443333 55.189999 36.310001 c
54.996666 36.176666 54.799999 36.110001 54.599998 36.110001 c
54.506668 36.110001 54.366669 36.130001 54.18 36.169998 c
54.02 36.209999 53.91 36.226665 53.849998 36.220001 c
53.543331 36.246666 53.100002 36.196667 52.52 36.07 c
51.779995 35.91 51.383335 35.826668 51.330002 35.82 c
51.149998 35.799999 50.933334 35.843334 50.68 35.950001 c
50.379997 36.076668 50.226665 36.236664 50.220001 36.43 c
50.213333 36.57 50.293331 36.686665 50.459999 36.779999 c
50.66 36.893333 50.779999 36.989998 50.82 37.07 c
51.300003 37.583336 51.856663 38.289997 52.490002 39.189999 c
53.456673 40.570007 53.939999 41.583328 53.939999 42.23 c
53.939999 42.470001 53.869999 42.656666 53.73 42.790001 c
53.716667 42.796665 53.700001 42.799999 53.68 42.799999 c
53.573334 42.799999 53.370003 42.673336 53.07 42.419998 c
52.803333 42.193333 52.639999 42.036667 52.580002 41.950001 c
52.506668 41.896667 52.443333 41.766666 52.389999 41.560001 c
52.343334 41.379997 52.240002 41.256668 52.080002 41.189999 c
52.033333 41.169998 51.976665 41.16 51.91 41.16 c
51.709999 41.16 51.503334 41.236668 51.290001 41.389999 c
51.056667 41.563335 50.926666 41.756664 50.900002 41.970001 c
50.886665 42.076668 50.986664 42.236664 51.200001 42.450001 c
51.413334 42.663334 51.646664 42.843334 51.900002 42.990002 c
52.653336 43.756672 53.293331 44.136665 53.82 44.130001 c
54.800003 44.110001 55.290001 43.60334 55.290001 42.610001 c
55.290001 41.816662 54.993336 40.866673 54.400002 39.759998 c
53.839996 38.706661 53.213337 37.870003 52.52 37.25 c
52.706669 37.276669 53.25333 37.383331 54.16 37.57 c
54.466667 37.630001 54.613335 37.66 54.599998 37.66 c
54.866669 37.66 55.106667 37.516666 55.32 37.23 c
h
W*
0 0 64 64 rc
45.219616 49.130085 m
60.48 49.130085 l
60.48 30.815264 l
45.219616 30.815264 l
h
f
Q
0.74117649 0.45882353 0.45882353 sc
q
2 14 m
62 14 l
62 10 l
2 10 l
2 14 l
h
W*
0 0 64 64 rc
-3 19 m
67 19 l
67 5 l
-3 5 l
h
f
ep
end
%%Trailer
%%EOF
