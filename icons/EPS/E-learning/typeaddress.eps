%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D102) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 64 64
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 64 64
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.27843139 0.58823532 0.90588236 sc
q
5 48.5 m
5 53.19442 8.8030519 57 13.500371 57 c
64 57 l
64 40 l
13.500371 40 l
8.8057461 40 5 43.815132 5 48.5 c
5 48.5 l
h
W*
0 0 64 64 rc
0 62 m
69 62 l
69 35 l
0 35 l
h
f
Q
1 1 1 sc
q
22.472 52.622002 m
22.5 52.547333 22.514 52.477333 22.514 52.411999 c
22.514 52.262665 22.43 52.080669 22.261999 51.866001 c
22.056665 51.613998 21.930666 51.417999 21.884001 51.278 c
20.344 46.630001 l
20.297333 46.480667 20.274 46.303333 20.274 46.098 c
20.274 45.790001 l
20.283333 45.659332 20.288 45.561333 20.288 45.495998 c
20.288 45.150665 20.171335 44.894001 19.938 44.726002 c
19.704666 44.557999 19.438667 44.473999 19.139999 44.473999 c
18.691998 44.473999 18.318668 44.641998 18.02 44.978001 c
17.870667 45.146 17.796 45.337334 17.796 45.551998 c
17.796 45.869335 17.786667 46.07 17.768 46.153999 c
16.927999 49.262001 l
16.115999 46.462002 l
16.087999 46.359333 16.064667 46.163334 16.046 45.874001 c
16.027332 45.640667 15.976001 45.454002 15.892 45.313999 c
15.537332 44.735329 15.103336 44.445999 14.59 44.445999 c
14.412665 44.445999 14.249334 44.497334 14.1 44.599998 c
13.913332 44.721333 13.801333 44.907997 13.764 45.16 c
13.726666 45.412003 13.689334 45.659332 13.652 45.902 c
12.42 50.689999 l
12.392 50.811333 12.308001 51.035332 12.168 51.362 c
12.056 51.614002 12 51.828667 12 52.006001 c
12 52.127335 12.023334 52.248665 12.07 52.369999 c
12.154 52.631336 12.489997 52.762001 13.078 52.762001 c
13.404668 52.762001 13.624 52.715332 13.736 52.622002 c
13.876 52.500668 13.950666 52.304668 13.96 52.034 c
13.969334 51.623333 13.978666 51.399334 13.988 51.362 c
14.828 48.001999 l
16.004 51.445999 l
16.022667 51.511333 16.032 51.576668 16.032 51.641998 c
16.032 51.698002 16.020334 51.779667 15.997 51.887001 c
15.973666 51.994335 15.962 52.076 15.962 52.132 c
15.962 52.337334 16.073999 52.495998 16.298 52.608002 c
16.484667 52.710667 16.689999 52.762001 16.914 52.762001 c
17.222002 52.762001 17.478666 52.687336 17.684 52.537998 c
17.945335 52.351334 18.09 52.111 18.118 51.817001 c
18.146 51.522999 18.169333 51.231335 18.188 50.942001 c
19.028 47.582001 l
20.372 51.613998 l
20.390667 51.670002 20.4 51.730667 20.4 51.796001 c
20.4 51.870667 20.386 51.971001 20.358 52.097 c
20.33 52.223 20.316 52.318665 20.316 52.383999 c
20.316 52.468002 20.334667 52.547333 20.372 52.622002 c
20.512001 52.874001 20.880663 53 21.478001 53 c
22.038002 53 22.369333 52.874001 22.472 52.622002 c
h
33.868 52.622002 m
33.896 52.547333 33.91 52.477333 33.91 52.411999 c
33.91 52.262665 33.826 52.080669 33.658001 51.866001 c
33.452667 51.613998 33.326668 51.417999 33.279999 51.278 c
31.74 46.630001 l
31.693333 46.480667 31.67 46.303333 31.67 46.098 c
31.67 45.790001 l
31.679333 45.659332 31.684 45.561333 31.684 45.495998 c
31.684 45.150665 31.567335 44.894001 31.334 44.726002 c
31.100666 44.557999 30.834669 44.473999 30.535999 44.473999 c
30.087997 44.473999 29.714668 44.641998 29.416 44.978001 c
29.266666 45.146 29.191999 45.337334 29.191999 45.551998 c
29.191999 45.869335 29.182667 46.07 29.164 46.153999 c
28.323999 49.262001 l
27.511999 46.462002 l
27.483999 46.359333 27.460667 46.163334 27.441999 45.874001 c
27.423334 45.640667 27.372 45.454002 27.288 45.313999 c
26.933332 44.735329 26.499336 44.445999 25.986 44.445999 c
25.808666 44.445999 25.645334 44.497334 25.496 44.599998 c
25.309332 44.721333 25.197334 44.907997 25.16 45.16 c
25.122667 45.412003 25.085333 45.659332 25.048 45.902 c
23.816 50.689999 l
23.788 50.811333 23.704 51.035332 23.563999 51.362 c
23.452 51.614002 23.396 51.828667 23.396 52.006001 c
23.396 52.127335 23.419333 52.248665 23.466 52.369999 c
23.550001 52.631336 23.885998 52.762001 24.474001 52.762001 c
24.800669 52.762001 25.019999 52.715332 25.132 52.622002 c
25.272001 52.500668 25.346666 52.304668 25.356001 52.034 c
25.365334 51.623333 25.374666 51.399334 25.384001 51.362 c
26.224001 48.001999 l
27.4 51.445999 l
27.418667 51.511333 27.427999 51.576668 27.427999 51.641998 c
27.427999 51.698002 27.416334 51.779667 27.393 51.887001 c
27.369667 51.994335 27.358 52.076 27.358 52.132 c
27.358 52.337334 27.469999 52.495998 27.694 52.608002 c
27.880667 52.710667 28.085999 52.762001 28.309999 52.762001 c
28.618002 52.762001 28.874666 52.687336 29.08 52.537998 c
29.341335 52.351334 29.486 52.111 29.514 51.817001 c
29.542 51.522999 29.565332 51.231335 29.584 50.942001 c
30.424 47.582001 l
31.768 51.613998 l
31.786667 51.670002 31.796 51.730667 31.796 51.796001 c
31.796 51.870667 31.782 51.971001 31.754 52.097 c
31.726 52.223 31.712 52.318665 31.712 52.383999 c
31.712 52.468002 31.730667 52.547333 31.768 52.622002 c
31.908001 52.874001 32.276665 53 32.874001 53 c
33.434002 53 33.765331 52.874001 33.868 52.622002 c
h
45.264 52.622002 m
45.292 52.547333 45.306 52.477333 45.306 52.411999 c
45.306 52.262665 45.222 52.080669 45.054001 51.866001 c
44.848667 51.613998 44.722668 51.417999 44.675999 51.278 c
43.136002 46.630001 l
43.089333 46.480667 43.066002 46.303333 43.066002 46.098 c
43.066002 45.790001 l
43.075333 45.659332 43.080002 45.561333 43.080002 45.495998 c
43.080002 45.150665 42.963333 44.894001 42.73 44.726002 c
42.496666 44.557999 42.230667 44.473999 41.931999 44.473999 c
41.483997 44.473999 41.110668 44.641998 40.812 44.978001 c
40.662666 45.146 40.588001 45.337334 40.588001 45.551998 c
40.588001 45.869335 40.578667 46.07 40.560001 46.153999 c
39.720001 49.262001 l
38.908001 46.462002 l
38.880001 46.359333 38.856667 46.163334 38.838001 45.874001 c
38.819332 45.640667 38.768002 45.454002 38.683998 45.313999 c
38.32933 44.735329 37.895336 44.445999 37.382 44.445999 c
37.204666 44.445999 37.041332 44.497334 36.891998 44.599998 c
36.705334 44.721333 36.593334 44.907997 36.556 45.16 c
36.518665 45.412003 36.481335 45.659332 36.444 45.902 c
35.212002 50.689999 l
35.183998 50.811333 35.100002 51.035332 34.959999 51.362 c
34.848 51.614002 34.792 51.828667 34.792 52.006001 c
34.792 52.127335 34.815334 52.248665 34.862 52.369999 c
34.945999 52.631336 35.281998 52.762001 35.869999 52.762001 c
36.196667 52.762001 36.416 52.715332 36.528 52.622002 c
36.667999 52.500668 36.742668 52.304668 36.751999 52.034 c
36.761333 51.623333 36.770668 51.399334 36.779999 51.362 c
37.619999 48.001999 l
38.796001 51.445999 l
38.814667 51.511333 38.824001 51.576668 38.824001 51.641998 c
38.824001 51.698002 38.812332 51.779667 38.789001 51.887001 c
38.765667 51.994335 38.754002 52.076 38.754002 52.132 c
38.754002 52.337334 38.865997 52.495998 39.09 52.608002 c
39.276669 52.710667 39.481998 52.762001 39.706001 52.762001 c
40.014 52.762001 40.270664 52.687336 40.476002 52.537998 c
40.737335 52.351334 40.882 52.111 40.91 51.817001 c
40.938 51.522999 40.961334 51.231335 40.98 50.942001 c
41.82 47.582001 l
43.164001 51.613998 l
43.182667 51.670002 43.192001 51.730667 43.192001 51.796001 c
43.192001 51.870667 43.178001 51.971001 43.150002 52.097 c
43.122002 52.223 43.108002 52.318665 43.108002 52.383999 c
43.108002 52.468002 43.126667 52.547333 43.164001 52.622002 c
43.304001 52.874001 43.672665 53 44.27 53 c
44.830002 53 45.161331 52.874001 45.264 52.622002 c
h
W*
0 0 64 64 rc
7 58 m
50.306 58 l
50.306 39.445999 l
7 39.445999 l
h
f
Q
0.8392157 0.3137255 0.78039217 sc
q
0 33.008385 m
0 34.108322 0.90472412 35 2.0032985 35 c
61.9967 35 l
63.103092 35 64 34.102161 64 33.008385 c
64 6.9916172 l
64 5.8916774 63.095276 5 61.9967 5 c
2.0032985 5 l
0.89690733 5 0 5.8978405 0 6.9916172 c
0 33.008385 l
h
W*
0 0 64 64 rc
-5 40 m
69 40 l
69 0 l
-5 0 l
h
f
Q
2 w
2 J
1 0.68627453 0.25098041 sc
q
0 0 64 64 rc
1 0 0 -1 17 33 cm
0 1 m
4 1 l
S
0.50196081 0.82352942 0.35686275 sc
1 0 0 -1 26 33 cm
0 1 m
4 1 l
S
Q
1 1 1 sc
q
23 11 m
48 11 l
48 7 l
23 7 l
23 11 l
h
W*
0 0 64 64 rc
18 16 m
53 16 l
53 2 l
18 2 l
h
f
Q
q
51 11 m
55 11 l
55 7 l
51 7 l
51 11 l
h
W*
0 0 64 64 rc
46 16 m
60 16 l
60 2 l
46 2 l
h
f
Q
q
58 23 m
62 23 l
62 13 l
58 13 l
58 23 l
h
W*
0 0 64 64 rc
53 28 m
67 28 l
67 8 l
53 8 l
h
f
Q
q
16 11 m
20 11 l
20 7 l
16 7 l
16 11 l
h
W*
0 0 64 64 rc
11 16 m
25 16 l
25 2 l
11 2 l
h
f
Q
q
51 29 m
55 29 l
55 25 l
51 25 l
51 29 l
h
W*
0 0 64 64 rc
46 34 m
60 34 l
60 20 l
46 20 l
h
f
Q
q
51 23 m
55 23 l
55 19 l
51 19 l
51 23 l
h
W*
0 0 64 64 rc
46 28 m
60 28 l
60 14 l
46 14 l
h
f
Q
q
51 17 m
55 17 l
55 13 l
51 13 l
51 17 l
h
W*
0 0 64 64 rc
46 22 m
60 22 l
60 8 l
46 8 l
h
f
Q
q
58 11 m
62 11 l
62 7 l
58 7 l
58 11 l
h
W*
0 0 64 64 rc
53 16 m
67 16 l
67 2 l
53 2 l
h
f
Q
q
58 29 m
62 29 l
62 25 l
58 25 l
58 29 l
h
W*
0 0 64 64 rc
53 34 m
67 34 l
67 20 l
53 20 l
h
f
Q
q
9 11 m
13 11 l
13 7 l
9 7 l
9 11 l
h
W*
0 0 64 64 rc
4 16 m
18 16 l
18 2 l
4 2 l
h
f
Q
q
9 29 m
13 29 l
13 25 l
9 25 l
9 29 l
h
W*
0 0 64 64 rc
4 34 m
18 34 l
18 20 l
4 20 l
h
f
Q
q
2 23 m
6 23 l
6 19 l
2 19 l
2 23 l
h
W*
0 0 64 64 rc
-3 28 m
11 28 l
11 14 l
-3 14 l
h
f
Q
q
16 17 m
20 17 l
20 13 l
16 13 l
16 17 l
h
W*
0 0 64 64 rc
11 22 m
25 22 l
25 8 l
11 8 l
h
f
Q
q
23 17 m
27 17 l
27 13 l
23 13 l
23 17 l
h
W*
0 0 64 64 rc
18 22 m
32 22 l
32 8 l
18 8 l
h
f
Q
q
30 17 m
34 17 l
34 13 l
30 13 l
30 17 l
h
W*
0 0 64 64 rc
25 22 m
39 22 l
39 8 l
25 8 l
h
f
Q
q
37 17 m
41 17 l
41 13 l
37 13 l
37 17 l
h
W*
0 0 64 64 rc
32 22 m
46 22 l
46 8 l
32 8 l
h
f
Q
q
44 17 m
48 17 l
48 13 l
44 13 l
44 17 l
h
W*
0 0 64 64 rc
39 22 m
53 22 l
53 8 l
39 8 l
h
f
Q
q
16 23 m
20 23 l
20 19 l
16 19 l
16 23 l
h
W*
0 0 64 64 rc
11 28 m
25 28 l
25 14 l
11 14 l
h
f
Q
q
9 23 m
13 23 l
13 19 l
9 19 l
9 23 l
h
W*
0 0 64 64 rc
4 28 m
18 28 l
18 14 l
4 14 l
h
f
Q
q
23 23 m
27 23 l
27 19 l
23 19 l
23 23 l
h
W*
0 0 64 64 rc
18 28 m
32 28 l
32 14 l
18 14 l
h
f
Q
q
30 23 m
34 23 l
34 19 l
30 19 l
30 23 l
h
W*
0 0 64 64 rc
25 28 m
39 28 l
39 14 l
25 14 l
h
f
Q
q
37 23 m
41 23 l
41 19 l
37 19 l
37 23 l
h
W*
0 0 64 64 rc
32 28 m
46 28 l
46 14 l
32 14 l
h
f
Q
q
44 23 m
48 23 l
48 19 l
44 19 l
44 23 l
h
W*
0 0 64 64 rc
39 28 m
53 28 l
53 14 l
39 14 l
h
f
Q
q
16 29 m
20 29 l
20 25 l
16 25 l
16 29 l
h
W*
0 0 64 64 rc
11 34 m
25 34 l
25 20 l
11 20 l
h
f
Q
q
23 29 m
27 29 l
27 25 l
23 25 l
23 29 l
h
W*
0 0 64 64 rc
18 34 m
32 34 l
32 20 l
18 20 l
h
f
Q
q
30 29 m
34 29 l
34 25 l
30 25 l
30 29 l
h
W*
0 0 64 64 rc
25 34 m
39 34 l
39 20 l
25 20 l
h
f
Q
q
37 29 m
41 29 l
41 25 l
37 25 l
37 29 l
h
W*
0 0 64 64 rc
32 34 m
46 34 l
46 20 l
32 20 l
h
f
Q
q
44 29 m
48 29 l
48 25 l
44 25 l
44 29 l
h
W*
0 0 64 64 rc
39 34 m
53 34 l
53 20 l
39 20 l
h
f
Q
q
2 11 m
6 11 l
6 7 l
2 7 l
2 11 l
h
W*
0 0 64 64 rc
-3 16 m
11 16 l
11 2 l
-3 2 l
h
f
Q
q
2 29 m
6 29 l
6 25 l
2 25 l
2 29 l
h
W*
0 0 64 64 rc
-3 34 m
11 34 l
11 20 l
-3 20 l
h
f
Q
q
2 17 m
13 17 l
13 13 l
2 13 l
2 17 l
h
W*
0 0 64 64 rc
-3 22 m
18 22 l
18 8 l
-3 8 l
h
f
ep
end
%%Trailer
%%EOF
