%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D102) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 64 64
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 64 64
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.847 0.847 0.847 sc
q
29 25 m
35 25 l
35 14 l
29 14 l
29 25 l
h
W*
0 0 64 64 rc
24 30 m
40 30 l
40 9 l
24 9 l
h
f
Q
4 w
1 J
0.59200001 0.59200001 0.59200001 sc
q
24 14 m
40 14 l
40 12 l
24 12 l
24 14 l
h
W*
0 0 64 64 rc
1 0 0 -1 24 14 cm
0 0 m
16 0 l
16 2 l
0 2 l
0 0 l
h
S
Q
0.52549022 0.52549022 0.52549022 sc
q
2 59.004494 m
2 60.658867 3.3373098 62 4.9959373 62 c
59.004063 62 l
60.658672 62 62 60.657532 62 59.004494 c
62 25.995506 l
62 24.341135 60.662689 23 59.004063 23 c
4.9959373 23 l
3.341327 23 2 24.342468 2 25.995506 c
2 59.004494 l
h
W*
0 0 64 64 rc
-3 67 m
67 67 l
67 18 l
-3 18 l
h
f
Q
0.13333334 0.72941178 0.55686277 sc
q
5 59 m
59 59 l
59 26 l
5 26 l
5 59 l
h
W*
0 0 64 64 rc
0 64 m
64 64 l
64 21 l
0 21 l
h
f
Q
1 1 1 sc
q
11.332 39.492001 m
11.268 39.188 11.052002 38.864002 10.684 38.52 c
10.627999 38.431999 10.408002 38.316002 10.024 38.172001 c
9.5839977 38.003998 9.2040014 37.931999 8.8839998 37.956001 c
8.2839966 37.995998 7.8120017 38.339996 7.4679999 38.987999 c
7.1559982 39.588001 7 40.323997 7 41.195999 c
7 42.140003 7.1759982 42.967995 7.5279999 43.68 c
7.920002 44.464005 8.4439964 44.903999 9.1000004 45 c
9.2280006 45.015999 9.3519993 45.023998 9.4720001 45.023998 c
10.424005 45.023998 10.948 44.440006 11.044 43.271999 c
11.092 42.735996 10.880002 42.152004 10.408 41.52 c
9.895997 40.823997 9.2400036 40.336002 8.4399996 40.056 c
8.5280008 39.736 8.5959997 39.528 8.6440001 39.431999 c
8.7560005 39.231998 8.907999 39.132 9.1000004 39.132 c
9.2840014 39.132 9.4799986 39.203999 9.6879997 39.348 c
9.8640013 39.468002 9.9839993 39.584 10.048 39.695999 c
10.08 39.712002 10.112 39.801998 10.144 39.966 c
10.176001 40.130001 10.259999 40.248001 10.396 40.32 c
10.444 40.344002 10.5 40.355999 10.564 40.355999 c
10.756001 40.355999 10.941999 40.262001 11.122 40.074001 c
11.302001 39.885998 11.372 39.692001 11.332 39.492001 c
h
9.448 43.716 m
9.1279984 43.716 8.868001 43.488003 8.6680002 43.032001 c
8.4039984 42.423996 8.2959995 41.824001 8.3439999 41.231998 c
8.7200022 41.352001 9.0679979 41.631996 9.3879995 42.071999 c
9.7080011 42.512001 9.868 42.903999 9.868 43.248001 c
9.868 43.560001 9.7280016 43.716 9.448 43.716 c
h
15.544 41.832001 m
15.48 41.776001 15.404 41.748001 15.316 41.748001 c
15.276 41.748001 15.184001 41.764 15.04 41.796001 c
14.895999 41.827999 14.784 41.832001 14.704 41.807999 c
13.408 41.495998 l
13.335999 41.48 13.212001 41.431999 13.036 41.352001 c
12.9 41.296001 12.788 41.268002 12.7 41.268002 c
12.499999 41.268002 12.324 41.360001 12.172 41.543999 c
12.02 41.728001 11.944 41.919998 11.944 42.119999 c
11.944 42.280003 11.992 42.416 12.088 42.528 c
12.12 42.560001 12.243999 42.576 12.46 42.576 c
12.724001 42.576 12.912 42.591999 13.024 42.624001 c
14.392 42.984001 l
14.752002 43.080002 14.971999 43.127998 15.052 43.127998 c
15.156 43.127998 15.247999 43.104 15.328 43.056 c
15.576001 42.911999 15.7 42.648003 15.7 42.264 c
15.7 42.063999 15.648001 41.920002 15.544 41.832001 c
h
18.448 38.172001 m
18.288 37.868 17.992002 37.716 17.559999 37.716 c
17.159998 37.716 16.880001 37.851997 16.719999 38.124001 c
16.671999 38.203999 16.648001 38.292 16.648001 38.388 c
16.648001 38.467999 16.676001 38.599998 16.732 38.784 c
16.788 38.968002 16.816 39.119999 16.816 39.240002 c
16.768 46.992001 l
16.768 47.639999 l
16.792 47.743999 16.903999 47.829998 17.104 47.897999 c
17.304001 47.966 17.515999 48 17.74 48 c
18.068001 48 18.275999 47.940002 18.364 47.82 c
18.452 47.700001 18.496 47.576 18.496 47.448002 c
18.496 47.360001 18.464001 47.214001 18.4 47.009998 c
18.336 46.806 18.304001 46.639999 18.304001 46.512001 c
18.304001 39.312 l
18.304001 39.191998 18.337999 39.034 18.406 38.838001 c
18.474001 38.641998 18.507999 38.5 18.507999 38.411999 c
18.507999 38.324001 18.488001 38.243999 18.448 38.172001 c
h
23.752001 39.492001 m
23.688 39.188 23.472002 38.864002 23.104 38.52 c
23.048 38.431999 22.828001 38.316002 22.444 38.172001 c
22.003998 38.003998 21.624002 37.931999 21.304001 37.956001 c
20.703997 37.995998 20.232002 38.339996 19.888 38.987999 c
19.575998 39.588001 19.42 40.323997 19.42 41.195999 c
19.42 42.140003 19.595999 42.967995 19.948 43.68 c
20.340002 44.464005 20.863997 44.903999 21.52 45 c
21.648001 45.015999 21.771999 45.023998 21.892 45.023998 c
22.844006 45.023998 23.368 44.440006 23.464001 43.271999 c
23.512001 42.735996 23.300003 42.152004 22.827999 41.52 c
22.315998 40.823997 21.660004 40.336002 20.860001 40.056 c
20.948 39.736 21.015999 39.528 21.063999 39.431999 c
21.176001 39.231998 21.327999 39.132 21.52 39.132 c
21.704 39.132 21.9 39.203999 22.108 39.348 c
22.284 39.468002 22.403999 39.584 22.468 39.695999 c
22.5 39.712002 22.532 39.801998 22.563999 39.966 c
22.596001 40.130001 22.679998 40.248001 22.816 40.32 c
22.864 40.344002 22.92 40.355999 22.983999 40.355999 c
23.176001 40.355999 23.362 40.262001 23.542 40.074001 c
23.722 39.885998 23.792 39.692001 23.752001 39.492001 c
h
21.868 43.716 m
21.547998 43.716 21.288 43.488003 21.087999 43.032001 c
20.823999 42.423996 20.716 41.824001 20.764 41.231998 c
21.140001 41.352001 21.487999 41.631996 21.808001 42.071999 c
22.128002 42.512001 22.288 42.903999 22.288 43.248001 c
22.288 43.560001 22.148001 43.716 21.868 43.716 c
h
29.992001 38.736 m
29.872 38.343998 29.576002 38.147999 29.104 38.147999 c
28.943998 38.147999 28.816 38.175999 28.719999 38.231998 c
28.591999 38.32 28.504 38.495998 28.455999 38.759998 c
28.359999 39.216003 28.264 39.571999 28.167999 39.827999 c
28.143999 39.387997 27.904003 38.942001 27.448 38.490002 c
26.991999 38.037998 26.532001 37.812 26.068001 37.812 c
25.483997 37.812 25.080002 38.199997 24.856001 38.976002 c
24.775999 39.264 24.736 39.535999 24.736 39.792 c
24.736 40.536003 25.115995 41.171997 25.875999 41.700001 c
26.500004 42.068001 27.127996 42.431999 27.76 42.792 c
27.792 42.928001 27.808001 43.059998 27.808001 43.188 c
27.808001 43.436001 27.74 43.582001 27.604 43.625999 c
27.467999 43.670002 27.352001 43.692001 27.256001 43.692001 c
27.087999 43.692001 26.950001 43.638 26.841999 43.529999 c
26.535999 43.223999 l
26.439999 43.16 26.316 43.012001 26.164 42.779999 c
26.043999 42.596001 25.912001 42.495998 25.768 42.48 c
25.559999 42.456001 25.372002 42.528 25.204 42.695999 c
25.035999 42.864002 24.952 43.059998 24.952 43.284 c
24.952 43.411999 24.983999 43.528 25.048 43.632 c
25.232 43.936001 25.507998 44.200001 25.875999 44.424 c
26.436003 44.760002 27.135996 44.928001 27.976 44.928001 c
28.512003 44.928001 28.879999 44.672001 29.08 44.16 c
29.208 43.815998 29.303999 43.172005 29.368 42.228001 c
29.440001 41.083996 29.528 40.248001 29.632 39.720001 c
29.648001 39.616001 29.716 39.484001 29.836 39.324001 c
29.956001 39.163998 30.016001 39.024002 30.016001 38.903999 c
30.016001 38.848 30.007999 38.792 29.992001 38.736 c
h
27.903999 41.688 m
27.664 41.559998 27.426001 41.428001 27.190001 41.292 c
26.953999 41.155998 26.736 40.976002 26.535999 40.751999 c
26.247999 40.424 26.104 40.144001 26.104 39.911999 c
26.104 39.719997 26.175999 39.52 26.32 39.312 c
26.4 39.200001 26.487999 39.144001 26.584 39.144001 c
26.792002 39.144001 27.018 39.375999 27.261999 39.84 c
27.506001 40.304001 27.719999 40.919994 27.903999 41.688 c
h
35.548 44.352001 m
35.515999 44.183998 35.364002 44.068001 35.091999 44.004002 c
34.771999 43.924 34.568001 43.832001 34.48 43.728001 c
32.523998 41.472 l
32.523998 39.647999 l
32.523998 39.472 32.574001 39.294003 32.674 39.113998 c
32.774002 38.933998 32.824001 38.796001 32.824001 38.700001 c
32.824001 38.604 32.796001 38.496002 32.740002 38.375999 c
32.604 38.071999 32.328003 37.919998 31.912001 37.919998 c
31.623999 37.919998 31.396 38.011997 31.228001 38.195999 c
31.115999 38.316002 31.059999 38.467999 31.059999 38.652 c
31.059999 38.716 31.068001 38.82 31.084 38.964001 c
31.1 39.108002 31.108 39.223999 31.108 39.312 c
31.108 43.799999 l
31.108 43.872002 31.076 43.959999 31.011999 44.063999 c
30.948 44.167999 30.916 44.251999 30.916 44.316002 c
30.916 44.363998 30.931999 44.419998 30.964001 44.484001 c
31.068001 44.676003 31.391996 44.771999 31.936001 44.771999 c
32.360001 44.771999 32.599998 44.672001 32.655998 44.472 c
32.68 44.391998 32.692001 44.324001 32.692001 44.268002 c
32.692001 44.18 32.66 44.112 32.596001 44.063999 c
32.532001 44.015999 32.5 43.967999 32.5 43.919998 c
32.523998 43.487999 l
33.556 44.580002 l
33.676003 44.716 33.801998 44.852001 33.933998 44.987999 c
34.066002 45.124001 34.219997 45.200001 34.396 45.216 c
34.668003 45.240002 34.93 45.18 35.181999 45.035999 c
35.434002 44.891998 35.560001 44.704002 35.560001 44.472 c
35.560001 44.431999 35.556 44.392002 35.548 44.352001 c
h
41.692001 39 m
41.675999 38.823997 41.560001 38.674 41.344002 38.549999 c
41.127998 38.425999 40.888 38.363998 40.624001 38.363998 c
40.231998 38.363998 39.964001 38.487999 39.82 38.736 c
39.883999 41.200012 39.812 42.447998 39.604 42.48 c
39.403999 42.512001 38.916004 41.408012 38.139999 39.167999 c
38.139999 38.448002 l
38.132 38.16 38.054001 37.956001 37.905998 37.835999 c
37.757999 37.716 37.600002 37.655998 37.431999 37.655998 c
37.143997 37.655998 36.836002 37.812 36.507999 38.124001 c
36.411999 38.203999 36.360001 38.811993 36.352001 39.948002 c
36.360001 39.251995 36.363998 40.543983 36.363998 43.824001 c
36.363998 43.896 36.355999 43.993999 36.34 44.118 c
36.324001 44.242001 36.316002 44.332001 36.316002 44.388 c
36.316002 44.540001 36.355999 44.672001 36.436001 44.784 c
36.532001 44.928001 36.683998 45 36.891998 45 c
37.108002 45 37.334 44.934002 37.57 44.801998 c
37.806 44.669998 37.947998 44.543999 37.995998 44.424 c
38.028 44.343998 38.043999 44.264 38.043999 44.183998 c
38.043999 44.104 38.012001 43.992001 37.948002 43.848 c
37.883999 43.703999 37.852001 43.584 37.852001 43.487999 c
37.852001 41.832001 l
38.356003 42.904007 38.736 43.612 38.992001 43.956001 c
39.448002 44.548004 39.963997 44.824001 40.540001 44.784 c
40.884003 44.759998 41.127998 44.440002 41.271999 43.824001 c
41.383999 43.359997 41.444 42.672005 41.452 41.759998 c
41.452 39.599998 l
41.467999 39.543999 41.523998 39.444 41.619999 39.299999 c
41.675999 39.220001 41.700001 39.119999 41.692001 39 c
h
44.380001 47.231998 m
44.403999 47.208 44.416 47.167999 44.416 47.112 c
44.416 47.040001 44.392002 46.916 44.344002 46.740002 c
44.287998 46.523998 44.251999 46.375999 44.236 46.296001 c
44.220001 46.216 44.228001 46.040001 44.259998 45.768002 c
44.259998 45.599998 44.209999 45.490002 44.110001 45.438 c
44.009998 45.386002 43.883999 45.360001 43.731998 45.360001 c
43.515999 45.360001 43.296001 45.403999 43.071999 45.492001 c
42.799999 45.604 42.664001 45.751999 42.664001 45.936001 c
42.664001 45.992001 42.688 46.07 42.736 46.169998 c
42.784 46.27 42.812 46.352001 42.82 46.416 c
42.835999 46.48 42.835999 46.639999 42.82 46.896 c
42.804001 47.096001 42.843998 47.231998 42.939999 47.304001 c
43.068001 47.400002 43.295998 47.448002 43.624001 47.448002 c
43.984001 47.448002 44.236 47.375999 44.380001 47.231998 c
h
44.535999 44.304001 m
44.535999 44.192001 44.473999 44.018002 44.349998 43.782001 c
44.225998 43.545998 44.164001 43.352001 44.164001 43.200001 c
44.164001 39.672001 l
44.164001 39.512001 44.208 39.286003 44.296001 38.993999 c
44.383999 38.702 44.428001 38.5 44.428001 38.388 c
44.428001 38.228001 44.364002 38.108002 44.236 38.028 c
44.035999 37.899998 43.82 37.835999 43.588001 37.835999 c
43.283997 37.835999 43.068001 37.939999 42.939999 38.147999 c
42.771999 38.404003 42.688 39.167995 42.688 40.439999 c
42.688 40.744003 42.694 41.217999 42.706001 41.862 c
42.717999 42.506004 42.723999 42.975998 42.723999 43.271999 c
42.723999 43.383999 42.712002 43.529999 42.688 43.709999 c
42.664001 43.889999 42.652 44.02 42.652 44.099998 c
42.652 44.364002 42.747997 44.591999 42.939999 44.784 c
43.02 44.864002 43.167999 44.903999 43.383999 44.903999 c
43.600002 44.903999 43.815998 44.869999 44.032001 44.801998 c
44.248001 44.734001 44.386002 44.656002 44.445999 44.568001 c
44.506001 44.48 44.535999 44.392002 44.535999 44.304001 c
h
51.028 39 m
51.012001 38.823997 50.896 38.674 50.68 38.549999 c
50.464001 38.425999 50.224003 38.363998 49.959999 38.363998 c
49.567997 38.363998 49.299999 38.487999 49.155998 38.736 c
49.220001 41.200012 49.148003 42.447998 48.939999 42.48 c
48.739998 42.512001 48.252003 41.408012 47.476002 39.167999 c
47.476002 38.448002 l
47.467999 38.16 47.389999 37.956001 47.242001 37.835999 c
47.093998 37.716 46.936001 37.655998 46.768002 37.655998 c
46.48 37.655998 46.172001 37.812 45.844002 38.124001 c
45.748001 38.203999 45.695999 38.811993 45.688 39.948002 c
45.695999 39.251995 45.700001 40.543983 45.700001 43.824001 c
45.700001 43.896 45.692001 43.993999 45.675999 44.118 c
45.66 44.242001 45.652 44.332001 45.652 44.388 c
45.652 44.540001 45.692001 44.672001 45.771999 44.784 c
45.868 44.928001 46.02 45 46.228001 45 c
46.444 45 46.669998 44.934002 46.905998 44.801998 c
47.142002 44.669998 47.284 44.543999 47.332001 44.424 c
47.363998 44.343998 47.380001 44.264 47.380001 44.183998 c
47.380001 44.104 47.348 43.992001 47.284 43.848 c
47.220001 43.703999 47.188 43.584 47.188 43.487999 c
47.188 41.832001 l
47.692001 42.904007 48.071999 43.612 48.327999 43.956001 c
48.784 44.548004 49.299995 44.824001 49.875999 44.784 c
50.220001 44.759998 50.464001 44.440002 50.608002 43.824001 c
50.720001 43.359997 50.779999 42.672005 50.787998 41.759998 c
50.787998 39.599998 l
50.804001 39.543999 50.860001 39.444 50.956001 39.299999 c
51.012001 39.220001 51.035999 39.119999 51.028 39 c
h
56.043999 44.604 m
56.060001 43.915997 56.096001 42.784008 56.152 41.208 c
56.184002 40.095993 56.200001 39.300003 56.200001 38.82 c
56.200001 37.763996 56.116001 37.044003 55.948002 36.66 c
55.779999 36.275997 55.440002 36.063999 54.928001 36.023998 c
54.287998 35.967999 53.724003 36.135998 53.236 36.528 c
52.995998 36.599998 52.844002 36.655998 52.779999 36.695999 c
52.644001 36.776001 52.556 36.911999 52.515999 37.104 c
52.444 37.480003 52.739998 37.667999 53.403999 37.667999 c
53.572002 37.667999 53.731998 37.647999 53.883999 37.608002 c
53.996002 37.584 54.119999 37.490002 54.256001 37.326 c
54.392002 37.161999 54.52 37.076 54.639999 37.068001 c
54.872002 37.051998 54.987999 37.379997 54.987999 38.051998 c
54.987999 38.34 54.967999 38.807999 54.928001 39.456001 c
54.639999 38.967999 54.431999 38.652 54.304001 38.507999 c
54.039997 38.236 53.732002 38.099998 53.380001 38.099998 c
52.883999 38.099998 52.484001 38.443996 52.18 39.132 c
51.899998 39.764004 51.759998 40.531994 51.759998 41.436001 c
51.759998 42.364006 51.907997 43.147995 52.203999 43.787998 c
52.540001 44.508003 53.003998 44.875999 53.596001 44.891998 c
53.916 44.900002 54.152 44.836002 54.304001 44.700001 c
54.456001 44.563999 54.604 44.424 54.748001 44.279999 c
54.644001 44.568001 54.667999 44.784 54.82 44.928001 c
54.908001 45.015999 55.040001 45.060001 55.216 45.060001 c
55.384003 45.060001 55.551998 45.015999 55.720001 44.928001 c
55.888 44.84 55.995998 44.732002 56.043999 44.604 c
h
54.604 41.543999 m
54.636002 42.008003 54.580002 42.447998 54.436001 42.863998 c
54.276001 43.328003 54.068001 43.560001 53.812 43.560001 c
53.604 43.560001 53.420002 43.328003 53.259998 42.863998 c
53.116001 42.447998 53.035999 42.008003 53.02 41.543999 c
53.004002 41.055996 53.040001 40.616001 53.127998 40.223999 c
53.240002 39.759998 53.396 39.528 53.596001 39.528 c
53.771999 39.528 53.975998 39.753998 54.208 40.206001 c
54.440002 40.658001 54.571999 41.103996 54.604 41.543999 c
h
W*
0 0 64 64 rc
2 53 m
61.200001 53 l
61.200001 31.0135 l
2 31.0135 l
h
f
Q
0.039215688 0.20784314 0.52549022 sc
q
20 8 m
20 6.8954306 20.89543 6 22 6 c
23.10457 6 24 6.8954306 24 8 c
24 9.1045694 23.10457 10 22 10 c
20.89543 10 20 9.1045694 20 8 c
h
W*
0 0 64 64 rc
29 15 m
29 1 l
15 1 l
15 15 l
h
f
Q
1 0.68627453 0.25098041 sc
q
11 9.0003853 m
11 10.104742 11.902557 11 13.006599 11 c
60.993401 11 l
62.101616 11 63 10.112567 63 9.0003853 c
63 2.999615 l
63 1.8952581 62.097443 1 60.993401 1 c
13.006599 1 l
11.898385 1 11 1.8874333 11 2.999615 c
11 9.0003853 l
h
W*
0 0 64 64 rc
6 16 m
68 16 l
68 -4 l
6 -4 l
h
f
Q
2 w
2 J
0.62352943 0.34117648 0.34117648 sc
q
0 0 64 64 rc
1 0 0 -1 18 10 cm
1 0 m
1 8 l
S
1 0 0 -1 23 10 cm
1 0 m
1 8 l
S
1 0 0 -1 45 10 cm
1 0 m
1 8 l
S
1 1 1 sc
1 0 0 -1 27 7 cm
0 1 m
16 1 l
S
Q
0.35686275 0.40784314 0.75294119 sc
q
11 19.000385 m
11 20.104742 11.902557 21 13.006599 21 c
60.993401 21 l
62.101616 21 63 20.112566 63 19.000385 c
63 12.999615 l
63 11.895258 62.097443 11 60.993401 11 c
13.006599 11 l
11.898385 11 11 11.887433 11 12.999615 c
11 19.000385 l
h
W*
0 0 64 64 rc
6 26 m
68 26 l
68 6 l
6 6 l
h
f
Q
0.60392159 0.80000001 1 sc
q
0 0 64 64 rc
1 0 0 -1 28 20 cm
1 0 m
1 8 l
S
1 0 0 -1 33 20 cm
1 0 m
1 8 l
S
1 0 0 -1 55 20 cm
1 0 m
1 8 l
S
1 1 1 sc
1 0 0 -1 37 17 cm
0 1 m
16 1 l
S
ep
end
%%Trailer
%%EOF
