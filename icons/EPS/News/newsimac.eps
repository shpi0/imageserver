%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D102) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 64 64
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 64 64
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.92941177 0.56862748 0.06666667 sc
q
2 54.005196 m
2 56.211468 3.7956808 58 6.0065556 58 c
59.004063 58 l
60.658672 58 62 56.661293 62 55.003475 c
62 21 l
2 21 l
2 54.005196 l
h
W*
0 0 64 64 rc
-3 63 m
67 63 l
67 16 l
-3 16 l
h
f
Q
2 w
2 J
0.35686275 0.40784314 0.75294119 sc
q
0 0 64 64 rc
1 0 0 -1 7 38 cm
0 1 m
24 1 l
S
1 0 0 -1 35 38 cm
0 1 m
23 1 l
S
1 0 0 -1 7 34 cm
0 1 m
51 1 l
S
Q
0.89411765 0.20784314 0.20784314 sc
q
22 23 m
23.10457 23 24 23.89543 24 25 c
24 26.10457 23.10457 27 22 27 c
20.89543 27 20 26.10457 20 25 c
20 23.89543 20.89543 23 22 23 c
h
W*
0 0 64 64 rc
15 32 m
29 32 l
29 18 l
15 18 l
h
f
Q
0.36862746 0.65490198 1 sc
q
27 23 m
28.10457 23 29 23.89543 29 25 c
29 26.10457 28.10457 27 27 27 c
25.89543 27 25 26.10457 25 25 c
25 23.89543 25.89543 23 27 23 c
h
W*
0 0 64 64 rc
20 32 m
34 32 l
34 18 l
20 18 l
h
f
Q
1 0.86666667 0.58431375 sc
q
32 23 m
33.104568 23 34 23.89543 34 25 c
34 26.10457 33.104568 27 32 27 c
30.89543 27 30 26.10457 30 25 c
30 23.89543 30.89543 23 32 23 c
h
W*
0 0 64 64 rc
25 32 m
39 32 l
39 18 l
25 18 l
h
f
Q
0.50196081 0.82352942 0.35686275 sc
q
37 23 m
38.104568 23 39 23.89543 39 25 c
39 26.10457 38.104568 27 37 27 c
35.895432 27 35 26.10457 35 25 c
35 23.89543 35.895432 23 37 23 c
h
W*
0 0 64 64 rc
30 32 m
44 32 l
44 18 l
30 18 l
h
f
Q
0.70588237 0.87450981 0.98431373 sc
q
42 23 m
43.104568 23 44 23.89543 44 25 c
44 26.10457 43.104568 27 42 27 c
40.895432 27 40 26.10457 40 25 c
40 23.89543 40.895432 23 42 23 c
h
W*
0 0 64 64 rc
35 32 m
49 32 l
49 18 l
35 18 l
h
f
Q
0.34901962 0.34901962 0.34901962 sc
q
2 21 m
62 21 l
62 16.001665 l
62 14.343891 60.662689 13 59.004063 13 c
4.9959373 13 l
3.341327 13 2 14.33902 2 16.001665 c
2 21 l
h
W*
0 0 64 64 rc
-3 26 m
67 26 l
67 8 l
-3 8 l
h
f
Q
0.59215689 0.59215689 0.59215689 sc
q
32 15 m
33.104568 15 34 15.895431 34 17 c
34 18.10457 33.104568 19 32 19 c
30.89543 19 30 18.10457 30 17 c
30 15.895431 30.89543 15 32 15 c
h
W*
0 0 64 64 rc
25 24 m
39 24 l
39 10 l
25 10 l
h
f
Q
q
25.612801 13 m
37.612801 13 l
39.178829 5.9528661 l
39.418507 4.8743277 38.718288 4 37.61874 4 c
25.606861 4 l
24.505573 4 23.80821 4.8793445 24.046772 5.9528661 c
25.612801 13 l
h
W*
0 0 64 64 rc
19 18 m
44.225857 18 l
44.225857 -1 l
19 -1 l
h
f
Q
0.35686275 0.40784314 0.75294119 sc
q
14.563 44.007999 m
14.544333 43.671997 14.427668 43.389668 14.213 43.160999 c
13.998332 42.932331 13.732335 42.827332 13.415 42.846001 c
12.621663 42.892666 12.080335 43.279995 11.791 44.007999 c
11.744333 44.119999 11.716333 44.301998 11.707 44.554001 c
11.688334 44.778 11.641667 44.959999 11.567 45.099998 c
11.221665 45.632004 10.904335 46.145332 10.615 46.639999 c
9.9056635 47.834671 9.3830013 48.833328 9.0469999 49.636002 c
9.0096664 48.683994 9.0843325 46.892014 9.2709999 44.259998 c
9.2709999 44.203999 9.3176661 44.077999 9.4110003 43.882 c
9.5043335 43.686001 9.5509996 43.522667 9.5509996 43.391998 c
9.5509996 43.223999 9.4950008 43.07 9.3830004 42.93 c
9.2243328 42.724667 8.9863348 42.622002 8.6689997 42.622002 c
8.3329983 42.622002 8.0040016 42.726997 7.6820002 42.937 c
7.3599982 43.146999 7.1803336 43.391998 7.1430001 43.672001 c
7.1149998 43.896 7.1756659 44.068665 7.3249998 44.189999 c
7.4743342 44.311333 7.5443335 44.418667 7.5349998 44.512001 c
7.1149998 53.080002 l
7.1149998 53.126667 7.1056666 53.196667 7.0869999 53.290001 c
7.0683331 53.383335 7.059 53.453335 7.059 53.5 c
7.059 53.639999 7.1313324 53.751999 7.276 53.835999 c
7.4206672 53.920002 7.6236653 53.962002 7.8850002 53.962002 c
8.5850039 53.962002 9.0843315 53.780003 9.3830004 53.416 c
9.467 53.322666 9.5089998 53.210667 9.5089998 53.080002 c
9.5089998 53.023998 9.4996672 52.949333 9.4809999 52.855999 c
9.4623337 52.762665 9.4530001 52.697334 9.4530001 52.66 c
9.4530001 52.632 9.4576664 52.604 9.467 52.576 c
9.6536674 51.623997 10.633657 49.626682 12.407 46.584 c
12.239 53.416 l
12.239 53.5 12.206334 53.593334 12.141 53.695999 c
12.075666 53.798668 12.043 53.877998 12.043 53.933998 c
12.043 54.055332 12.136333 54.209332 12.323 54.396 c
12.425667 54.507999 12.584332 54.563999 12.799 54.563999 c
13.144335 54.563999 13.498999 54.442669 13.863 54.200001 c
14.227002 53.957333 14.413667 53.696003 14.423 53.416 c
14.432333 53.238667 14.360001 53.098667 14.206 52.995998 c
14.051999 52.893333 13.975 52.790668 13.975 52.688 c
14.171 45.015999 l
14.171 44.885334 14.238666 44.719669 14.374 44.519001 c
14.509334 44.318333 14.572333 44.147999 14.563 44.007999 c
h
20.302999 44.470001 m
20.228333 44.11533 19.976336 43.737335 19.547001 43.335999 c
19.481667 43.233334 19.225002 43.098 18.777 42.93 c
18.263664 42.733997 17.820335 42.650002 17.447001 42.678001 c
16.746996 42.724667 16.196335 43.125996 15.795 43.882 c
15.430998 44.582005 15.249 45.440662 15.249 46.458 c
15.249 47.559338 15.454331 48.52533 15.865 49.355999 c
16.322336 50.270672 16.933662 50.784 17.698999 50.896 c
17.848333 50.914665 17.993 50.924 18.132999 50.924 c
19.243671 50.924 19.855 50.242672 19.966999 48.880001 c
20.023001 48.254665 19.775669 47.573338 19.225 46.835999 c
18.627665 46.023994 17.862337 45.45467 16.929001 45.127998 c
17.031668 44.754665 17.111 44.512001 17.167 44.400002 c
17.297667 44.166664 17.474998 44.049999 17.698999 44.049999 c
17.913668 44.049999 18.142332 44.133999 18.385 44.301998 c
18.590334 44.442001 18.730333 44.577332 18.805 44.708 c
18.842333 44.726665 18.879667 44.831665 18.917 45.022999 c
18.954334 45.214333 19.052332 45.352001 19.211 45.436001 c
19.267 45.464001 19.332333 45.478001 19.407 45.478001 c
19.631001 45.478001 19.848 45.368336 20.058001 45.148998 c
20.268002 44.929665 20.349667 44.703335 20.302999 44.470001 c
h
18.105 49.397999 m
17.731665 49.397999 17.428335 49.132004 17.195 48.599998 c
16.886999 47.890663 16.761 47.19067 16.816999 46.5 c
17.255669 46.639999 17.661665 46.966663 18.035 47.48 c
18.408335 47.993336 18.594999 48.450665 18.594999 48.852001 c
18.594999 49.216003 18.431669 49.397999 18.105 49.397999 c
h
31.433001 50.644001 m
31.461 50.569332 31.475 50.499332 31.475 50.433998 c
31.475 50.284664 31.391001 50.102669 31.223 49.888 c
31.017666 49.635998 30.891666 49.440002 30.844999 49.299999 c
29.305 44.652 l
29.258333 44.502666 29.235001 44.325333 29.235001 44.119999 c
29.235001 43.812 l
29.244333 43.681332 29.249001 43.583332 29.249001 43.518002 c
29.249001 43.172665 29.132334 42.916 28.899 42.748001 c
28.665665 42.579998 28.399668 42.495998 28.101 42.495998 c
27.652998 42.495998 27.279669 42.663998 26.981001 43 c
26.831665 43.167999 26.757 43.359333 26.757 43.574001 c
26.757 43.891335 26.747667 44.091999 26.729 44.175999 c
25.889 47.284 l
25.077 44.484001 l
25.049 44.381332 25.025667 44.185333 25.007 43.896 c
24.988333 43.662666 24.937 43.476002 24.853001 43.335999 c
24.498331 42.757332 24.064337 42.467999 23.551001 42.467999 c
23.373665 42.467999 23.210335 42.519333 23.061001 42.622002 c
22.874332 42.743336 22.762333 42.93 22.725 43.181999 c
22.687666 43.434002 22.650333 43.681332 22.613001 43.924 c
21.381001 48.712002 l
21.353001 48.833332 21.269001 49.057331 21.129 49.383999 c
21.017 49.636002 20.961 49.850666 20.961 50.028 c
20.961 50.149334 20.984333 50.270664 21.031 50.391998 c
21.115 50.653336 21.450996 50.784 22.039 50.784 c
22.365669 50.784 22.584999 50.737335 22.697001 50.644001 c
22.837 50.522667 22.911667 50.326668 22.921 50.056 c
22.930334 49.645332 22.939667 49.421333 22.948999 49.383999 c
23.789 46.023998 l
24.965 49.467999 l
24.983667 49.533333 24.993 49.598667 24.993 49.664001 c
24.993 49.720001 24.981333 49.801666 24.958 49.909 c
24.934666 50.016335 24.923 50.098 24.923 50.153999 c
24.923 50.359333 25.034998 50.517998 25.259001 50.630001 c
25.445667 50.732666 25.650999 50.784 25.875 50.784 c
26.183002 50.784 26.439665 50.709335 26.645 50.560001 c
26.906334 50.373333 27.051001 50.133003 27.079 49.839001 c
27.107 49.544998 27.130333 49.253334 27.149 48.964001 c
27.989 45.604 l
29.333 49.636002 l
29.351667 49.692001 29.361 49.752666 29.361 49.818001 c
29.361 49.892666 29.347 49.993 29.319 50.118999 c
29.291 50.244999 29.277 50.340668 29.277 50.405998 c
29.277 50.490002 29.295666 50.569332 29.333 50.644001 c
29.473001 50.896 29.841663 51.021999 30.438999 51.021999 c
30.999002 51.021999 31.330334 50.896 31.433001 50.644001 c
h
36.333 44.875999 m
36.333 44.222664 36.09967 43.665001 35.632999 43.202999 c
35.166332 42.740997 34.615669 42.509998 33.980999 42.509998 c
33.579666 42.509998 33.164337 42.701332 32.735001 43.084 c
32.398998 43.392002 32.095669 43.769997 31.825001 44.217999 c
31.591665 44.610001 31.489 44.857334 31.517 44.959999 c
31.619667 45.193333 31.941664 45.310001 32.483002 45.310001 c
32.707001 45.310001 32.884335 45.277332 33.014999 45.212002 c
33.239002 45.090668 33.365002 44.936668 33.393002 44.75 c
33.421001 44.535332 33.467667 44.400002 33.533001 44.344002 c
33.729 44.04533 33.906334 43.896 34.064999 43.896 c
34.186333 43.896 34.300667 43.977665 34.408001 44.140999 c
34.515335 44.304333 34.569 44.497997 34.569 44.722 c
34.569 44.862 34.545666 45.001999 34.499001 45.141998 c
34.452332 45.282001 34.200336 45.496666 33.743 45.785999 c
33.192329 46.131336 32.800335 46.434666 32.567001 46.695999 c
32.165665 47.144001 31.965 47.666664 31.965 48.264 c
31.965 48.964005 32.17033 49.577663 32.581001 50.105 c
32.991669 50.632336 33.514332 50.896 34.148998 50.896 c
34.802338 50.896 35.301666 50.64867 35.646999 50.153999 c
35.927002 49.752666 36.043667 49.346668 35.997002 48.936001 c
36.099667 48.824001 36.151001 48.637333 36.151001 48.375999 c
36.151001 48.095997 36.048336 47.858002 35.842999 47.661999 c
35.637665 47.466 35.42767 47.368 35.213001 47.368 c
34.895664 47.368 34.620335 47.577999 34.387001 47.998001 c
34.321667 48.110001 34.289001 48.259331 34.289001 48.445999 c
34.289001 48.529999 34.296001 48.648998 34.310001 48.803001 c
34.324001 48.957001 34.331001 49.066666 34.331001 49.132 c
34.331001 49.374668 34.242332 49.495998 34.064999 49.495998 c
33.794331 49.495998 33.659 49.230003 33.659 48.698002 c
33.659 48.156666 33.83633 47.722668 34.191002 47.396 c
34.331001 47.265331 34.634331 47.078667 35.101002 46.835999 c
35.502335 46.630665 35.786999 46.42067 35.955002 46.206001 c
36.207001 45.879333 36.333 45.436005 36.333 44.875999 c
h
W*
0 0 64 64 rc
2.059 59.563999 m
41.333 59.563999 l
41.333 37.467999 l
2.059 37.467999 l
h
f
ep
end
%%Trailer
%%EOF
