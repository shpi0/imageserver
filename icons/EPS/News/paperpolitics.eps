%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D102) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 64 64
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 64 64
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.847 0.847 0.847 sc
q
1.6483256 42.454002 m
1.2201424 44.052002 2.1623867 45.692921 3.7703846 46.123783 c
50.135674 58.547325 l
51.735836 58.976086 53.380482 58.026943 53.808319 56.430229 c
62.351673 24.545998 l
62.779858 22.947996 61.837612 21.307079 60.229614 20.876217 c
13.864327 8.4526758 l
12.264163 8.0239134 10.619517 8.9730568 10.19168 10.56977 c
1.6483256 42.454002 l
h
W*
0 0 64 64 rc
-5.2506928 48.882973 m
56.568562 65.447395 l
69.250694 18.117027 l
7.4314404 1.5526078 l
h
f
Q
0.9254902 0.9254902 0.9254902 sc
q
9 40.993416 m
9 42.653904 10.334839 44 11.999561 44 c
60.000439 44 l
61.657051 44 63 42.665943 63 40.993416 c
63 4.0065861 l
63 2.3460944 61.665161 1 60.000439 1 c
11.999561 1 l
10.342949 1 9 2.3340569 9 4.0065861 c
9 40.993416 l
h
W*
0 0 64 64 rc
4 49 m
68 49 l
68 -4 l
4 -4 l
h
f
Q
1 0.68627453 0.25098041 sc
q
14 24 m
31 24 l
31 14 l
14 14 l
14 24 l
h
W*
0 0 64 64 rc
9 29 m
36 29 l
36 9 l
9 9 l
h
f
Q
2 w
2 J
0.59200001 0.59200001 0.59200001 sc
q
0 0 64 64 rc
1 0 0 -1 35 24 cm
0 1 m
23.021729 1 l
S
1 0 0 -1 35 16 cm
0 1 m
23.021729 1 l
S
1 0 0 -1 35 20 cm
0 1 m
23.021729 1 l
S
Q
0.59215689 0.59215689 0.59215689 sc
q
20.107 38.827999 m
20.237001 38.637333 20.302 38.381668 20.302 38.061001 c
20.302 37.306995 19.890337 36.145676 19.066999 34.577 c
18.208996 32.921658 17.507002 32.094002 16.961 32.094002 c
16.822332 32.094002 16.718334 32.172001 16.649 32.327999 c
16.622999 32.128666 16.610001 31.877335 16.610001 31.573999 c
16.610001 31.053997 16.640333 30.456003 16.701 29.780001 c
16.701 29.719334 16.722666 29.619667 16.766001 29.481001 c
16.809334 29.342333 16.830999 29.238333 16.830999 29.169001 c
16.830999 29.004332 16.718334 28.865667 16.493 28.753 c
16.389 28.701 16.250334 28.674999 16.077 28.674999 c
15.790998 28.674999 15.522335 28.74 15.271 28.870001 c
14.984999 29.008667 14.820333 29.190666 14.777 29.416 c
14.768333 29.476667 14.764 29.528666 14.764 29.572001 c
14.764 29.702002 14.8095 29.821167 14.9005 29.929501 c
14.991501 30.037834 15.037 30.109333 15.037 30.143999 c
14.803 38.568001 l
14.803 38.594002 14.79 38.646 14.764 38.723999 c
14.738 38.802002 14.725 38.862667 14.725 38.905998 c
14.725 39.062 14.837666 39.183334 15.063 39.27 c
15.236334 39.339333 15.418332 39.374001 15.609 39.374001 c
15.669667 39.374001 15.912332 39.348 16.337 39.296001 c
16.389 39.296001 16.646832 39.389164 17.1105 39.5755 c
17.574169 39.761833 17.983665 39.855 18.339001 39.855 c
19.032337 39.855 19.621664 39.512669 20.107 38.827999 c
h
18.17 38.307999 m
17.962 38.307999 17.695501 38.197502 17.370501 37.976501 c
17.045498 37.755501 16.761667 37.502003 16.518999 37.216 c
16.570999 34.226002 l
16.952335 34.512001 17.366165 35.086163 17.8125 35.948502 c
18.258835 36.810837 18.482 37.467331 18.482 37.917999 c
18.482 38.178001 18.378 38.307999 18.17 38.307999 c
h
27.049 34.459999 m
27.109667 33.29866 26.910336 32.100506 26.451 30.865499 c
25.991665 29.630493 25.502003 28.935001 24.982 28.778999 c
24.773998 28.709667 24.570333 28.683666 24.371 28.701 c
24.162998 28.726999 23.959333 28.753 23.76 28.778999 c
21.974657 28.987001 20.991001 30.88065 20.809 34.459999 c
20.757 35.430672 20.912998 36.470661 21.277 37.580002 c
21.615002 38.61134 21.965998 39.248333 22.33 39.491001 c
22.416668 39.551666 22.511999 39.582001 22.615999 39.582001 c
22.694 39.582001 22.815332 39.558167 22.98 39.510502 c
23.144667 39.462833 23.270332 39.438999 23.357 39.438999 c
23.461 39.438999 23.649498 39.462833 23.922501 39.510502 c
24.195501 39.558167 24.396999 39.582001 24.527 39.582001 c
24.648335 39.582001 24.747999 39.564667 24.826 39.529999 c
26.16934 38.983997 26.910332 37.294014 27.049 34.459999 c
h
25.294001 34.459999 m
25.207333 35.543339 25.090334 36.357998 24.943001 36.903999 c
24.700333 37.82267 24.34067 38.282001 23.864 38.282001 c
23.733999 38.282001 23.5975 38.247334 23.4545 38.178001 c
23.311499 38.108665 23.123001 37.662338 22.889 36.839001 c
22.646332 35.937664 22.525 35.144669 22.525 34.459999 c
22.525 33.567329 22.680998 32.629173 22.993 31.6455 c
23.305002 30.661829 23.603998 30.17 23.889999 30.17 c
24.158669 30.17 24.457664 30.611996 24.787001 31.496 c
25.133669 32.414673 25.306999 33.285664 25.306999 34.109001 c
25.306999 34.230335 25.302668 34.347332 25.294001 34.459999 c
h
32.886002 31.002001 m
32.938 30.897999 32.964001 30.781 32.964001 30.650999 c
32.964001 30.434332 32.896835 30.226334 32.762501 30.027 c
32.628166 29.827665 32.472168 29.695499 32.294498 29.630501 c
32.116833 29.5655 31.863335 29.533001 31.534 29.533001 c
31.204664 29.533001 30.966333 29.511333 30.819 29.468 c
30.671665 29.424667 30.502668 29.290335 30.312 29.065001 c
30.147333 28.882999 29.861336 28.761667 29.454 28.701 c
29.202665 28.666332 28.947001 28.752998 28.687 28.961 c
28.426998 29.169001 28.249334 29.424665 28.153999 29.728001 c
28.136667 29.788668 28.128 29.844999 28.128 29.896999 c
28.128 30.009666 28.190832 30.135332 28.3165 30.274 c
28.442167 30.412668 28.500668 30.534 28.492001 30.638 c
27.945999 38.515999 l
27.945999 38.550667 27.900501 38.630833 27.8095 38.7565 c
27.7185 38.882168 27.673 38.988335 27.673 39.075001 c
27.673 39.196335 27.737999 39.313332 27.868 39.425999 c
28.050001 39.590668 28.309998 39.673 28.648001 39.673 c
28.934002 39.673 29.209166 39.612335 29.473499 39.491001 c
29.737835 39.369667 29.904667 39.226669 29.974001 39.062 c
30.017334 38.966667 30.039 38.884335 30.039 38.814999 c
30.039 38.737 30 38.659 29.922001 38.581001 c
29.844 38.502998 29.809334 38.429333 29.818001 38.360001 c
30.285999 31.184 l
31.066 31.496 l
31.230667 31.574001 31.397499 31.649834 31.5665 31.723499 c
31.7355 31.797167 31.876333 31.834 31.989 31.834 c
32.301003 31.834 32.599998 31.556669 32.886002 31.002001 c
h
35.641998 29.104 m
35.563999 28.887333 35.338669 28.778999 34.966 28.778999 c
34.862 28.778999 34.749332 28.787666 34.627998 28.805 c
33.917328 28.917667 33.501335 29.129999 33.380001 29.441999 c
33.354 29.502666 33.341 29.563334 33.341 29.624001 c
33.341 29.806002 33.440666 29.987999 33.639999 30.17 c
33.605331 31.470007 33.527332 34.121979 33.405998 38.125999 c
33.414665 38.238667 33.384335 38.370834 33.314999 38.522499 c
33.245667 38.674168 33.210999 38.784668 33.210999 38.854 c
33.210999 39.010002 33.310665 39.174667 33.509998 39.348 c
33.648666 39.469334 33.843666 39.529999 34.095001 39.529999 c
34.381001 39.529999 34.68433 39.456333 35.005001 39.308998 c
35.386333 39.126999 35.577 38.906002 35.577 38.646 c
35.577 38.585335 35.486 38.351334 35.304001 37.944 c
35.433998 30.066 l
35.433998 29.962 35.473 29.829834 35.550999 29.6695 c
35.629002 29.509167 35.667999 29.381334 35.667999 29.285999 c
35.667999 29.225332 35.659332 29.164667 35.641998 29.104 c
h
42.063999 37.970001 m
41.968666 37.787998 41.765003 37.696999 41.452999 37.696999 c
41.045666 37.696999 40.807335 37.684002 40.737999 37.658001 c
40.417332 37.519333 40.04467 37.363335 39.619999 37.189999 c
39.594002 36.53133 39.581001 35.807671 39.581001 35.019001 c
39.581001 33.415657 39.628666 31.773342 39.723999 30.091999 c
39.723999 29.970667 39.769501 29.812502 39.8605 29.6175 c
39.9515 29.422499 39.997002 29.281668 39.997002 29.195 c
39.997002 29.082333 39.958 28.978334 39.880001 28.882999 c
39.689331 28.622999 39.403336 28.493 39.021999 28.493 c
38.692665 28.493 38.378502 28.581833 38.079498 28.759501 c
37.780499 28.937168 37.609333 29.147331 37.566002 29.389999 c
37.540001 29.52 37.607166 29.667332 37.767502 29.832001 c
37.927834 29.996668 38.007999 30.152666 38.007999 30.299999 c
37.947334 32.024673 37.917 33.532661 37.917 34.824001 c
37.917 35.604004 37.93 36.227997 37.956001 36.695999 c
37.947334 36.695999 37.826 36.652668 37.591999 36.566002 c
37.436001 36.505333 37.310333 36.474998 37.215 36.474998 c
37.076332 36.474998 36.950668 36.522667 36.838001 36.618 c
36.560665 36.852001 36.387333 37.007999 36.318001 37.085999 c
36.179333 37.242001 36.110001 37.406666 36.110001 37.580002 c
36.110001 37.640667 36.118668 37.709999 36.136002 37.787998 c
36.161999 37.909332 36.794659 38.15633 38.034 38.528999 c
39.368675 38.936337 40.088001 39.174667 40.192001 39.243999 c
40.287334 39.278667 40.393501 39.356667 40.510502 39.478001 c
40.627502 39.599335 40.755333 39.668667 40.894001 39.686001 c
41.084667 39.703335 41.335999 39.577667 41.647999 39.308998 c
41.994667 39.005665 42.167999 38.689335 42.167999 38.360001 c
42.167999 38.23 42.133335 38.100002 42.063999 37.970001 c
h
45.391998 29.104 m
45.313999 28.887333 45.088669 28.778999 44.716 28.778999 c
44.612 28.778999 44.499332 28.787666 44.377998 28.805 c
43.667328 28.917667 43.251335 29.129999 43.130001 29.441999 c
43.104 29.502666 43.091 29.563334 43.091 29.624001 c
43.091 29.806002 43.190666 29.987999 43.389999 30.17 c
43.355331 31.470007 43.277332 34.121979 43.155998 38.125999 c
43.164665 38.238667 43.134335 38.370834 43.064999 38.522499 c
42.995667 38.674168 42.960999 38.784668 42.960999 38.854 c
42.960999 39.010002 43.060665 39.174667 43.259998 39.348 c
43.398666 39.469334 43.593666 39.529999 43.845001 39.529999 c
44.131001 39.529999 44.43433 39.456333 44.755001 39.308998 c
45.136333 39.126999 45.327 38.906002 45.327 38.646 c
45.327 38.585335 45.236 38.351334 45.054001 37.944 c
45.183998 30.066 l
45.183998 29.962 45.223 29.829834 45.300999 29.6695 c
45.379002 29.509167 45.417999 29.381334 45.417999 29.285999 c
45.417999 29.225332 45.409332 29.164667 45.391998 29.104 c
h
51.541 31.743 m
50.717663 29.68899 49.894337 28.657667 49.070999 28.649 c
48.074329 28.640333 47.346336 29.155994 46.887001 30.195999 c
46.531666 30.993338 46.349667 32.037659 46.341 33.328999 c
46.332333 34.785007 46.522999 36.110992 46.912998 37.306999 c
47.36367 38.702339 47.974663 39.443333 48.745998 39.529999 c
48.858665 39.538666 48.966999 39.542999 49.070999 39.542999 c
49.790337 39.542999 50.344997 39.222336 50.735001 38.581001 c
51.021 38.095665 51.263664 37.324337 51.463001 36.266998 c
51.610332 35.842331 51.683998 35.582333 51.683998 35.487 c
51.683998 35.201 51.506336 34.98 51.151001 34.824001 c
51.072998 34.789333 50.982002 34.771999 50.877998 34.771999 c
50.626667 34.771999 50.349335 34.854332 50.046001 35.019001 c
49.690666 35.209667 49.513 35.417667 49.513 35.643002 c
49.513 35.677666 49.573666 35.846664 49.695 36.150002 c
49.677666 36.531334 49.608334 36.893166 49.487 37.2355 c
49.365665 37.577835 49.227001 37.766335 49.070999 37.800999 c
48.828331 37.861668 48.616001 37.380672 48.433998 36.358002 c
48.278 35.508663 48.182667 34.57267 48.147999 33.549999 c
48.122002 32.778664 48.165333 32.063671 48.278 31.405001 c
48.408001 30.650997 48.602997 30.248001 48.862999 30.195999 c
49.019001 30.17 49.205334 30.364998 49.422001 30.781 c
49.630001 31.162334 49.803333 31.612997 49.942001 32.132999 c
49.924667 32.219666 49.916 32.301998 49.916 32.380001 c
49.916 32.891335 50.227997 33.146999 50.852001 33.146999 c
50.990669 33.146999 51.129333 33.133999 51.268002 33.108002 c
51.692669 33.021332 51.904999 32.809002 51.904999 32.471001 c
51.904999 32.193665 51.783669 31.951 51.541 31.743 c
h
58.508999 31.158001 m
58.508999 30.481997 58.294502 29.890503 57.865501 29.383499 c
57.436497 28.876497 56.90567 28.622999 56.272999 28.622999 c
54.998993 28.622999 54.063004 29.22966 53.465 30.443001 c
52.814999 30.867668 52.490002 31.227331 52.490002 31.521999 c
52.490002 31.669334 52.580997 31.790667 52.763 31.886 c
53.118336 32.076668 53.443333 32.172001 53.737999 32.172001 c
54.379337 32.172001 54.808331 31.79067 55.025002 31.028 c
55.129002 30.82 55.237331 30.612001 55.349998 30.403999 c
55.462666 30.195999 55.614334 30.091999 55.805 30.091999 c
56.316338 30.091999 56.571999 30.455996 56.571999 31.184 c
56.571999 31.834003 56.455002 32.271664 56.221001 32.497002 c
56.117001 32.592335 55.701004 32.791664 54.973 33.095001 c
54.39233 33.337669 53.924335 33.753662 53.569 34.342999 c
53.248333 34.880337 53.083668 35.439331 53.075001 36.02 c
53.066334 36.956005 53.300331 37.787998 53.777 38.515999 c
54.279671 39.296005 54.903664 39.686001 55.648998 39.686001 c
56.515671 39.686001 57.148331 39.339336 57.547001 38.646 c
57.807003 38.212666 57.954334 37.675335 57.988998 37.034 c
58.084335 36.704666 58.132 36.405666 58.132 36.137001 c
58.132 35.963665 58.110332 35.820667 58.067001 35.708 c
57.937 35.387333 57.681335 35.227001 57.299999 35.227001 c
57.014 35.227001 56.754002 35.330997 56.52 35.539001 c
56.259998 35.764336 56.099667 36.080666 56.039001 36.487999 c
56.013 36.626667 56.041164 36.765331 56.123501 36.903999 c
56.205833 37.042667 56.247002 37.120667 56.247002 37.138 c
56.247002 37.155334 56.238335 37.172668 56.221001 37.189999 c
56.229668 37.233334 56.234001 37.276665 56.234001 37.32 c
56.234001 37.580002 56.082336 37.701332 55.778999 37.683998 c
55.484333 37.666668 55.254669 37.471668 55.09 37.098999 c
54.942665 36.778332 54.877666 36.410004 54.895 35.993999 c
54.921001 35.257328 55.40633 34.668003 56.351002 34.226002 c
57.096336 33.879333 57.612 33.537003 57.897999 33.199001 c
58.305336 32.713665 58.508999 32.033337 58.508999 31.158001 c
h
W*
0 0 64 64 rc
9.7250004 44.855 m
63.508999 44.855 l
63.508999 23.493 l
9.7250004 23.493 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
0 0 64 64 rc
1 0 0 -1 15 12 cm
0 1 m
43.046486 1 l
S
1 0 0 -1 15 8 cm
0 1 m
43.046486 1 l
S
ep
end
%%Trailer
%%EOF
