%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D102) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 64 64
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 64 64
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.847 0.847 0.847 sc
q
1.6483256 42.454002 m
1.2201424 44.052002 2.1623867 45.692921 3.7703846 46.123783 c
50.135674 58.547325 l
51.735836 58.976086 53.380482 58.026943 53.808319 56.430229 c
62.351673 24.545998 l
62.779858 22.947996 61.837612 21.307079 60.229614 20.876217 c
13.864327 8.4526758 l
12.264163 8.0239134 10.619517 8.9730568 10.19168 10.56977 c
1.6483256 42.454002 l
h
W*
0 0 64 64 rc
-5.2506928 48.882973 m
56.568562 65.447395 l
69.250694 18.117027 l
7.4314404 1.5526078 l
h
f
Q
0.9254902 0.9254902 0.9254902 sc
q
9 40.993416 m
9 42.653904 10.334839 44 11.999561 44 c
60.000439 44 l
61.657051 44 63 42.665943 63 40.993416 c
63 4.0065861 l
63 2.3460944 61.665161 1 60.000439 1 c
11.999561 1 l
10.342949 1 9 2.3340569 9 4.0065861 c
9 40.993416 l
h
W*
0 0 64 64 rc
4 49 m
68 49 l
68 -4 l
4 -4 l
h
f
Q
0.36862746 0.65490198 1 sc
q
14 24 m
31 24 l
31 14 l
14 14 l
14 24 l
h
W*
0 0 64 64 rc
9 29 m
36 29 l
36 9 l
9 9 l
h
f
Q
2 w
2 J
0.59200001 0.59200001 0.59200001 sc
q
0 0 64 64 rc
1 0 0 -1 35 24 cm
0 1 m
23.021729 1 l
S
1 0 0 -1 35 16 cm
0 1 m
23.021729 1 l
S
1 0 0 -1 35 20 cm
0 1 m
23.021729 1 l
S
Q
0.59215689 0.59215689 0.59215689 sc
q
22.837 39.452 m
22.923668 39.304665 22.966999 39.170334 22.966999 39.049 c
22.966999 38.936333 22.919334 38.797668 22.823999 38.632999 c
22.702665 38.424999 22.629 38.273335 22.603001 38.178001 c
20.679001 31.860001 l
20.618334 31.677999 20.587999 31.461334 20.587999 31.209999 c
20.587999 31.097332 20.596666 30.937 20.614 30.729 c
20.631334 30.521 20.639999 30.369333 20.639999 30.274 c
20.639999 29.797331 20.481834 29.4615 20.165501 29.2665 c
19.849165 29.071499 19.513334 28.974001 19.158001 28.974001 c
18.689997 28.974001 18.278336 29.138664 17.923 29.468 c
17.706333 29.667334 17.598 29.922998 17.598 30.235001 c
17.598 30.330334 17.613167 30.484165 17.643499 30.696501 c
17.673834 30.908834 17.688999 31.075666 17.688999 31.197001 c
17.688999 31.344334 17.671667 31.478666 17.636999 31.6 c
16.518999 35.551998 l
15.193 30.950001 l
15.167 30.845999 15.2125 30.720335 15.3295 30.573 c
15.446501 30.425667 15.505 30.308666 15.505 30.222 c
15.496333 29.519997 15.314335 28.961002 14.959 28.545 c
14.776999 28.337 14.530002 28.233 14.218 28.233 c
13.749998 28.233 13.399001 28.414999 13.165 28.778999 c
13.087 28.900333 13.048 29.047667 13.048 29.221001 c
13.039333 29.481001 13.026334 29.65 13.009 29.728001 c
11.137 37.813999 l
11.119667 37.900665 11.067667 38.030666 10.981 38.203999 c
10.903 38.351334 10.864 38.472668 10.864 38.568001 c
10.864 38.802002 10.998332 38.996998 11.267 39.153 c
11.492334 39.283001 11.734999 39.348 11.995 39.348 c
12.272335 39.348 12.506332 39.278667 12.697 39.139999 c
12.853001 39.027332 12.939667 38.849667 12.957 38.606998 c
12.974334 38.36433 12.991667 38.125999 13.009 37.891998 c
13.945 32.874001 l
15.427 38.282001 l
15.444333 38.351334 15.4335 38.446667 15.3945 38.568001 c
15.3555 38.689335 15.336 38.780334 15.336 38.841 c
15.336 38.953667 15.383666 39.070667 15.479 39.192001 c
15.643667 39.408669 15.946998 39.516998 16.389 39.516998 c
16.917669 39.516998 17.298998 39.365334 17.533001 39.062 c
17.628334 38.940666 17.676001 38.815002 17.676001 38.685001 c
17.676001 38.624332 17.660833 38.533333 17.630501 38.411999 c
17.600166 38.290665 17.584999 38.199665 17.584999 38.139 c
17.584999 38.078335 17.593666 38.021999 17.611 37.970001 c
19.066999 32.874001 l
20.653 38.203999 l
20.670334 38.256001 20.687666 38.494331 20.705 38.918999 c
20.722334 39.205002 20.809 39.408665 20.965 39.529999 c
21.251001 39.755333 21.588999 39.868 21.979 39.868 c
22.377668 39.868 22.663666 39.729336 22.837 39.452 c
h
28.427 38.125999 m
28.227665 37.961334 27.972002 37.879002 27.66 37.879002 c
27.529999 37.879002 27.378334 37.891998 27.205 37.917999 c
26.953665 37.84 26.728334 37.762001 26.528999 37.683998 c
26.043665 37.501999 25.723001 37.346001 25.566999 37.216 c
25.514999 36.314663 25.514999 35.28334 25.566999 34.122002 c
25.618999 34.156666 25.748999 34.191334 25.957001 34.226002 c
26.061001 34.408001 26.238665 34.499001 26.49 34.499001 c
26.741335 34.499001 27.033833 34.377666 27.3675 34.134998 c
27.701168 33.892334 27.868 33.653999 27.868 33.419998 c
27.868 33.359333 27.855 33.298668 27.829 33.237999 c
27.725 32.977997 27.564669 32.813335 27.348 32.743999 c
27.217999 32.700668 27.027334 32.689835 26.775999 32.711498 c
26.524666 32.733166 26.364334 32.726665 26.295 32.692001 c
26.095665 32.596664 25.853001 32.484001 25.566999 32.354 c
25.566999 31.573996 25.593 31.071335 25.645 30.846001 c
26.009003 30.932667 26.312332 31.036667 26.555 31.158001 c
26.598333 31.218666 26.641666 31.275 26.684999 31.327 c
26.771667 31.422335 26.927666 31.461334 27.153 31.444 c
27.395668 31.426666 27.646999 31.288002 27.907 31.028 c
28.167002 30.768 28.297001 30.503668 28.297001 30.235001 c
28.297001 30.000999 28.197334 29.827667 27.997999 29.715 c
27.798666 29.602333 27.465002 29.563334 26.997 29.598 c
25.775 28.987 l
25.723 28.961 25.610334 28.874334 25.437 28.726999 c
25.306999 28.614332 25.190001 28.558001 25.086 28.558001 c
25.051332 28.558001 25.012333 28.562334 24.969 28.570999 c
24.509665 28.709667 24.093668 29.06933 23.721001 29.65 c
23.695 29.693333 23.681999 29.745333 23.681999 29.806 c
23.681999 29.832001 23.729666 30.005331 23.825001 30.326 c
23.729666 32.848011 23.712334 35.534653 23.773001 38.386002 c
23.712334 38.472668 23.681999 38.559334 23.681999 38.646 c
23.681999 38.932003 23.946331 39.113998 24.475 39.192001 c
24.587667 39.209335 24.730665 39.179001 24.903999 39.101002 c
25.016666 39.040333 25.125 38.984001 25.229 38.931999 c
26.789 39.425999 l
26.823668 39.434666 26.923332 39.486668 27.087999 39.582001 c
27.200666 39.651333 27.330666 39.686001 27.478001 39.686001 c
27.547333 39.686001 27.629665 39.677334 27.725 39.66 c
27.915668 39.625332 28.104166 39.475834 28.290501 39.211498 c
28.476833 38.947166 28.57 38.698002 28.57 38.464001 c
28.57 38.316666 28.522333 38.203999 28.427 38.125999 c
h
36.331001 31.652 m
36.270332 31.539333 36.136002 31.469999 35.928001 31.444 c
35.910667 31.444 35.724335 31.435333 35.368999 31.417999 c
35.429668 31.027998 35.654999 30.542669 36.044998 29.962 c
36.270336 29.797333 36.382999 29.580667 36.382999 29.312 c
36.382999 28.887331 36.123001 28.674999 35.603001 28.674999 c
35.108997 28.674999 34.771 28.800665 34.589001 29.052 c
34.528332 29.138666 34.489334 29.255667 34.472 29.403 c
34.472 29.498333 34.467667 29.598 34.459 29.702 c
34.381001 29.780001 34.147003 30.282661 33.757 31.209999 c
33.046329 31.105999 32.171005 30.958668 31.131001 30.768 c
31.027 30.516665 30.914333 30.15267 30.792999 29.676001 c
30.810333 29.589333 30.819 29.507 30.819 29.429001 c
30.819 29.195 30.741001 29.015167 30.584999 28.8895 c
30.428999 28.763832 30.242668 28.701 30.025999 28.701 c
29.783333 28.701 29.558001 28.792 29.35 28.974001 c
29.141998 29.156 29.038 29.368332 29.038 29.611 c
29.038 29.827667 29.137665 30.022665 29.337 30.195999 c
29.987003 33.498016 30.775661 36.227989 31.702999 38.386002 c
31.685667 38.490002 31.677 38.593998 31.677 38.698002 c
31.677 39.131336 31.824331 39.417332 32.118999 39.556 c
32.240334 39.608002 32.396332 39.633999 32.587002 39.633999 c
32.951 39.633999 33.254333 39.577667 33.497002 39.465 c
33.809002 39.308998 33.965 39.075001 33.965 38.763 c
33.965 38.476997 33.887001 38.221336 33.730999 37.995998 c
33.895668 36.522659 34.250996 34.824009 34.797001 32.900002 c
34.848999 32.908669 35.026665 32.952 35.330002 33.029999 c
35.512001 33.082001 35.650665 33.108002 35.745998 33.108002 c
35.858665 33.108002 35.949665 33.082001 36.019001 33.029999 c
36.322334 32.795998 36.473999 32.510002 36.473999 32.172001 c
36.473999 31.99 36.426334 31.816668 36.331001 31.652 c
h
33.210999 32.639999 m
33.063667 33.186001 32.82967 34.234657 32.508999 35.785999 c
31.893663 34.442661 31.529667 33.290005 31.417 32.327999 c
33.210999 32.639999 l
h
41.842999 37.970001 m
41.747665 37.787998 41.544003 37.696999 41.231998 37.696999 c
40.824665 37.696999 40.586334 37.684002 40.516998 37.658001 c
40.196331 37.519333 39.823669 37.363335 39.398998 37.189999 c
39.373001 36.53133 39.360001 35.807671 39.360001 35.019001 c
39.360001 33.415657 39.407665 31.773342 39.502998 30.091999 c
39.502998 29.970667 39.5485 29.812502 39.6395 29.6175 c
39.730499 29.422499 39.776001 29.281668 39.776001 29.195 c
39.776001 29.082333 39.737 28.978334 39.659 28.882999 c
39.468334 28.622999 39.182335 28.493 38.800999 28.493 c
38.471664 28.493 38.157501 28.581833 37.858501 28.759501 c
37.559498 28.937168 37.388332 29.147331 37.345001 29.389999 c
37.319 29.52 37.386166 29.667332 37.546501 29.832001 c
37.706833 29.996668 37.786999 30.152666 37.786999 30.299999 c
37.726334 32.024673 37.695999 33.532661 37.695999 34.824001 c
37.695999 35.604004 37.709 36.227997 37.735001 36.695999 c
37.726334 36.695999 37.605 36.652668 37.370998 36.566002 c
37.215 36.505333 37.089333 36.474998 36.993999 36.474998 c
36.855331 36.474998 36.729668 36.522667 36.617001 36.618 c
36.339664 36.852001 36.166332 37.007999 36.097 37.085999 c
35.958332 37.242001 35.889 37.406666 35.889 37.580002 c
35.889 37.640667 35.897667 37.709999 35.915001 37.787998 c
35.941002 37.909332 36.573662 38.15633 37.813 38.528999 c
39.147675 38.936337 39.867001 39.174667 39.971001 39.243999 c
40.066334 39.278667 40.172501 39.356667 40.289501 39.478001 c
40.406502 39.599335 40.534332 39.668667 40.673 39.686001 c
40.863667 39.703335 41.114998 39.577667 41.426998 39.308998 c
41.77367 39.005665 41.946999 38.689335 41.946999 38.360001 c
41.946999 38.23 41.912334 38.100002 41.842999 37.970001 c
h
47.693001 33.316002 m
47.658333 32.622662 47.667 31.626007 47.719002 30.326 c
47.719002 30.239332 47.749332 30.118 47.810001 29.962 c
47.870667 29.806 47.901001 29.693335 47.901001 29.624001 c
47.901001 29.450666 47.75367 29.303333 47.459 29.181999 c
47.398335 29.156 47.320335 29.143 47.224998 29.143 c
46.938999 29.143 46.63567 29.220999 46.314999 29.377001 c
45.933666 29.559 45.743 29.775665 45.743 30.027 c
45.743 30.139668 45.784164 30.286999 45.866501 30.469 c
45.948833 30.651001 46.028999 30.828667 46.106998 31.002001 c
46.106998 33.237999 l
44.365002 32.874001 l
44.365002 32.449329 44.369335 31.851337 44.377998 31.08 c
44.386665 30.308662 44.390999 29.918667 44.390999 29.91 c
44.390999 29.806 44.419167 29.645668 44.475498 29.429001 c
44.531834 29.212332 44.560001 29.056334 44.560001 28.961 c
44.560001 28.787666 44.501499 28.646833 44.384499 28.5385 c
44.267498 28.430166 44.109333 28.375999 43.91 28.375999 c
43.702 28.375999 43.489666 28.432333 43.272999 28.545 c
43.056332 28.657667 42.911167 28.772499 42.837502 28.8895 c
42.763832 29.0065 42.727001 29.091 42.727001 29.143 c
42.727001 29.160334 42.761665 29.251333 42.831001 29.416 c
42.831001 29.788668 42.826668 30.395329 42.818001 31.236 c
42.809334 32.076672 42.805 32.613998 42.805 32.848 c
42.796333 32.874001 42.692333 33.060333 42.493 33.407001 c
42.371666 33.606335 42.328335 33.792667 42.362999 33.966 c
42.380333 34.061333 42.432331 34.139332 42.519001 34.200001 c
42.778999 34.382 l
42.752998 36.444675 42.761665 37.839996 42.805 38.568001 c
42.727001 38.723999 42.688 38.849667 42.688 38.945 c
42.688 39.135666 42.82233 39.295998 43.091 39.425999 c
43.203667 39.478001 43.363998 39.504002 43.571999 39.504002 c
44.248005 39.504002 44.659664 39.322002 44.806999 38.958 c
44.833 38.888668 44.846001 38.823666 44.846001 38.763 c
44.846001 38.641666 44.770168 38.461834 44.6185 38.223499 c
44.466831 37.985165 44.390999 37.788002 44.390999 37.632 c
44.339001 36.245327 44.330334 35.214005 44.365002 34.537998 c
45.214336 34.685333 45.777664 34.798 46.055 34.875999 c
45.977001 35.933338 45.985664 37.172661 46.081001 38.594002 c
46.002998 38.810669 45.964001 38.988331 45.964001 39.126999 c
45.964001 39.387001 46.124332 39.599331 46.445 39.764 c
46.514332 39.798668 46.613998 39.816002 46.743999 39.816002 c
47.047337 39.816002 47.341999 39.742332 47.627998 39.595001 c
47.957336 39.421665 48.126335 39.200668 48.134998 38.931999 c
48.143665 38.810665 48.067833 38.659 47.907501 38.477001 c
47.747166 38.294998 47.667 38.134666 47.667 37.995998 c
47.649666 36.747993 47.658333 35.699337 47.693001 34.849998 c
47.831669 34.737331 47.9725 34.572666 48.115501 34.355999 c
48.258499 34.139332 48.330002 33.961666 48.330002 33.823002 c
48.330002 33.684334 48.256332 33.580334 48.109001 33.511002 c
47.961666 33.441666 47.823002 33.376667 47.693001 33.316002 c
h
54.153999 38.125999 m
53.954666 37.961334 53.699001 37.879002 53.387001 37.879002 c
53.257 37.879002 53.105335 37.891998 52.931999 37.917999 c
52.680664 37.84 52.455334 37.762001 52.256001 37.683998 c
51.770664 37.501999 51.450001 37.346001 51.293999 37.216 c
51.242001 36.314663 51.242001 35.28334 51.293999 34.122002 c
51.346001 34.156666 51.475998 34.191334 51.683998 34.226002 c
51.788002 34.408001 51.965664 34.499001 52.216999 34.499001 c
52.468334 34.499001 52.76083 34.377666 53.094501 34.134998 c
53.428169 33.892334 53.595001 33.653999 53.595001 33.419998 c
53.595001 33.359333 53.582001 33.298668 53.556 33.237999 c
53.452 32.977997 53.291668 32.813335 53.075001 32.743999 c
52.945 32.700668 52.754333 32.689835 52.502998 32.711498 c
52.251667 32.733166 52.091335 32.726665 52.021999 32.692001 c
51.822666 32.596664 51.580002 32.484001 51.293999 32.354 c
51.293999 31.573996 51.32 31.071335 51.372002 30.846001 c
51.736 30.932667 52.039333 31.036667 52.282001 31.158001 c
52.325333 31.218666 52.368668 31.275 52.411999 31.327 c
52.498669 31.422335 52.654667 31.461334 52.880001 31.444 c
53.122669 31.426666 53.374001 31.288002 53.633999 31.028 c
53.894001 30.768 54.023998 30.503668 54.023998 30.235001 c
54.023998 30.000999 53.924335 29.827667 53.724998 29.715 c
53.525665 29.602333 53.192001 29.563334 52.723999 29.598 c
51.501999 28.987 l
51.450001 28.961 51.337334 28.874334 51.164001 28.726999 c
51.034 28.614332 50.917 28.558001 50.813 28.558001 c
50.778332 28.558001 50.739334 28.562334 50.695999 28.570999 c
50.236664 28.709667 49.820667 29.06933 49.448002 29.65 c
49.422001 29.693333 49.409 29.745333 49.409 29.806 c
49.409 29.832001 49.456665 30.005331 49.551998 30.326 c
49.456665 32.848011 49.439335 35.534653 49.5 38.386002 c
49.439335 38.472668 49.409 38.559334 49.409 38.646 c
49.409 38.932003 49.673332 39.113998 50.202 39.192001 c
50.314667 39.209335 50.457664 39.179001 50.631001 39.101002 c
50.743668 39.040333 50.852001 38.984001 50.956001 38.931999 c
52.515999 39.425999 l
52.550667 39.434666 52.650333 39.486668 52.814999 39.582001 c
52.927666 39.651333 53.057667 39.686001 53.205002 39.686001 c
53.274334 39.686001 53.356667 39.677334 53.452 39.66 c
53.642666 39.625332 53.831165 39.475834 54.017502 39.211498 c
54.203835 38.947166 54.297001 38.698002 54.297001 38.464001 c
54.297001 38.316666 54.249332 38.203999 54.153999 38.125999 c
h
62.564999 29.858 m
62.573666 29.806 62.577999 29.758333 62.577999 29.715 c
62.577999 29.454998 62.426334 29.236168 62.123001 29.0585 c
61.819664 28.880833 61.503334 28.792 61.174 28.792 c
60.974667 28.792 60.814335 28.830999 60.693001 28.909 c
60.606335 28.961 60.530499 29.062832 60.4655 29.2145 c
60.400501 29.366167 60.328999 29.468 60.250999 29.52 c
57.377998 31.444 l
57.494999 30.247999 l
57.503666 30.187332 57.570831 30.061668 57.696499 29.871 c
57.822166 29.680332 57.884998 29.52 57.884998 29.389999 c
57.884998 29.199333 57.763668 29.021667 57.521 28.857 c
57.373665 28.753 57.187336 28.701 56.962002 28.701 c
56.641331 28.701 56.342335 28.787666 56.064999 28.961 c
55.761665 29.134335 55.579666 29.355331 55.519001 29.624001 c
55.510334 29.676001 55.506001 29.719334 55.506001 29.754 c
55.506001 29.875334 55.564499 29.981499 55.681499 30.0725 c
55.7985 30.1635 55.856998 30.247999 55.856998 30.326 c
55.441002 37.736 l
55.432335 37.848667 55.384666 37.998165 55.298 38.184502 c
55.211334 38.370834 55.167999 38.507332 55.167999 38.594002 c
55.167999 38.819336 55.315331 39.001331 55.610001 39.139999 c
55.852669 39.261333 56.099667 39.321999 56.351002 39.321999 c
56.515667 39.321999 56.658665 39.298168 56.779999 39.2505 c
56.901333 39.202831 56.983665 39.129166 57.027 39.029499 c
57.070335 38.929832 57.122334 38.880001 57.182999 38.880001 c
57.191666 38.871334 57.455997 38.966667 57.976002 39.166 c
58.582668 39.391335 59.115665 39.504002 59.575001 39.504002 c
60.242336 39.504002 60.779663 39.27 61.187 38.801998 c
61.299667 38.672001 61.355999 38.490002 61.355999 38.256001 c
61.355999 37.623329 60.992004 36.730671 60.264 35.577999 c
59.570663 34.494659 58.855671 33.628002 58.118999 32.978001 c
61.473 30.638 l
61.481667 30.629333 61.69833 30.525333 62.123001 30.326 c
62.365669 30.213333 62.513 30.057335 62.564999 29.858 c
h
59.081001 37.931 m
58.890331 37.931 58.587002 37.749001 58.171001 37.384998 c
58.084332 37.315666 57.763668 37.01667 57.209 36.487999 c
57.182999 34.160999 l
57.720337 34.750336 58.205666 35.40683 58.639 36.130501 c
59.072334 36.854172 59.289001 37.371998 59.289001 37.683998 c
59.289001 37.848667 59.219666 37.931 59.081001 37.931 c
h
W*
0 0 64 64 rc
5.8639998 44.868 m
67.578003 44.868 l
67.578003 23.233 l
5.8639998 23.233 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
0 0 64 64 rc
1 0 0 -1 15 12 cm
0 1 m
43.046486 1 l
S
1 0 0 -1 15 8 cm
0 1 m
43.046486 1 l
S
ep
end
%%Trailer
%%EOF
