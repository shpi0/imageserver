%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D102) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 64 64
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 64 64
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
2 w
2 J
0.60000002 i
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
0 0 64 64 rc
1 0 0 -1 16 56.554672 cm
0 16 m
16 0 l
32 16 l
S
Q
0.74117649 0.45882353 0.45882353 sc
q
1 37.006714 m
1 38.107574 1.900351 39 2.9926302 39 c
61.00737 39 l
62.107868 39 63 38.100288 63 37.006714 c
63 11.993287 l
63 10.892426 62.099648 10 61.00737 10 c
2.9926302 10 l
1.892131 10 1 10.899713 1 11.993287 c
1 37.006714 l
h
W*
0 0 64 64 rc
-4 44 m
68 44 l
68 5 l
-4 5 l
h
f
Q
0.70588237 0.87450981 0.98431373 sc
q
3 37 m
61 37 l
61 12 l
3 12 l
3 37 l
h
W*
0 0 64 64 rc
-2 42 m
66 42 l
66 7 l
-2 7 l
h
f
Q
0.67058825 0.37254903 0.37254903 sc
q
10 42 m
20 42 l
20 39 l
10 39 l
10 42 l
h
W*
0 0 64 64 rc
5 47 m
25 47 l
25 34 l
5 34 l
h
f
Q
q
44 42 m
54 42 l
54 39 l
44 39 l
44 42 l
h
W*
0 0 64 64 rc
39 47 m
59 47 l
59 34 l
39 34 l
h
f
Q
0.847 0.847 0.847 sc
q
32 52 m
33.656853 52 35 53.343147 35 55 c
35 56.656853 33.656853 58 32 58 c
30.343145 58 29 56.656853 29 55 c
29 53.343147 30.343145 52 32 52 c
h
W*
0 0 64 64 rc
24 63 m
40 63 l
40 47 l
24 47 l
h
f
Q
0.34901962 0.34901962 0.34901962 sc
q
26.266001 27.643999 m
26.294001 27.569332 26.308001 27.499334 26.308001 27.434 c
26.308001 27.284666 26.224001 27.102667 26.056 26.888 c
25.850666 26.636 25.724667 26.440001 25.677999 26.299999 c
24.138 21.652 l
24.091333 21.502666 24.068001 21.325335 24.068001 21.120001 c
24.068001 20.812 l
24.077333 20.681334 24.082001 20.583334 24.082001 20.518 c
24.082001 20.172665 23.965334 19.916 23.732 19.747999 c
23.498665 19.58 23.232668 19.496 22.934 19.496 c
22.485998 19.496 22.112669 19.663998 21.813999 20 c
21.664665 20.168001 21.59 20.359333 21.59 20.573999 c
21.59 20.891335 21.580667 21.091999 21.562 21.176001 c
20.722 24.284 l
19.91 21.483999 l
19.882 21.381332 19.858667 21.185335 19.84 20.896 c
19.821333 20.662666 19.77 20.476 19.686001 20.336 c
19.331331 19.75733 18.897335 19.468 18.384001 19.468 c
18.206665 19.468 18.043335 19.519333 17.893999 19.622 c
17.707333 19.743334 17.595333 19.929998 17.558001 20.181999 c
17.520666 20.434002 17.483334 20.681332 17.445999 20.924 c
16.214001 25.712 l
16.185999 25.833334 16.102001 26.057331 15.962 26.384001 c
15.849999 26.636002 15.794 26.850666 15.794 27.028 c
15.794 27.149334 15.817333 27.270666 15.864 27.392 c
15.948 27.653336 16.283997 27.784 16.872 27.784 c
17.198668 27.784 17.417999 27.737333 17.530001 27.643999 c
17.67 27.522667 17.744667 27.326668 17.754 27.056 c
17.763334 26.64533 17.772667 26.421333 17.782 26.384001 c
18.622 23.024 l
19.798 26.468 l
19.816668 26.533333 19.826 26.598667 19.826 26.664 c
19.826 26.720001 19.814333 26.801666 19.791 26.909 c
19.767666 27.016335 19.756001 27.098 19.756001 27.153999 c
19.756001 27.359335 19.867998 27.518 20.091999 27.629999 c
20.278667 27.732668 20.483999 27.784 20.708 27.784 c
21.016001 27.784 21.272665 27.709333 21.478001 27.559999 c
21.739334 27.373333 21.884001 27.133001 21.912001 26.839001 c
21.940001 26.544998 21.963333 26.253334 21.982 25.964001 c
22.822001 22.604 l
24.166 26.636 l
24.184668 26.691999 24.194 26.752666 24.194 26.818001 c
24.194 26.892668 24.18 26.993 24.152 27.118999 c
24.124001 27.245001 24.110001 27.340666 24.110001 27.406 c
24.110001 27.49 24.128666 27.569332 24.166 27.643999 c
24.306 27.896002 24.674664 28.021999 25.271999 28.021999 c
25.832003 28.021999 26.163332 27.896002 26.266001 27.643999 c
h
32.453999 20.587999 m
32.313999 20.130665 31.96867 19.902 31.417999 19.902 c
31.231333 19.902 31.082001 19.934666 30.969999 20 c
30.820665 20.102667 30.718 20.307999 30.662001 20.615999 c
30.549999 21.148003 30.438 21.563332 30.326 21.862 c
30.298 21.348663 30.018003 20.828337 29.486 20.301001 c
28.953997 19.773664 28.417336 19.51 27.875999 19.51 c
27.194664 19.51 26.723335 19.962662 26.462 20.868 c
26.368666 21.204002 26.322001 21.521332 26.322001 21.82 c
26.322001 22.688004 26.765329 23.429996 27.652 24.046 c
28.380003 24.475336 29.112663 24.899998 29.85 25.32 c
29.887333 25.478668 29.906 25.632666 29.906 25.782 c
29.906 26.071335 29.826668 26.241667 29.667999 26.292999 c
29.509333 26.344334 29.374001 26.370001 29.261999 26.370001 c
29.065998 26.370001 28.905001 26.307001 28.778999 26.181 c
28.422001 25.823999 l
28.309999 25.749332 28.165335 25.576668 27.988001 25.306 c
27.848 25.091331 27.694 24.974667 27.525999 24.955999 c
27.283333 24.927999 27.064001 25.011999 26.868 25.208 c
26.671999 25.404001 26.573999 25.632666 26.573999 25.893999 c
26.573999 26.043335 26.611334 26.178665 26.686001 26.299999 c
26.900667 26.654669 27.222664 26.962666 27.652 27.224001 c
28.305336 27.616001 29.121996 27.812 30.101999 27.812 c
30.727337 27.812 31.156666 27.513336 31.389999 26.916 c
31.539333 26.514666 31.651333 25.763338 31.726 24.662001 c
31.810001 23.327326 31.912666 22.352003 32.034 21.736 c
32.052666 21.614666 32.132 21.460667 32.271999 21.274 c
32.412003 21.087332 32.481998 20.924 32.481998 20.784 c
32.481998 20.718666 32.472668 20.653334 32.453999 20.587999 c
h
30.018 24.032 m
29.737999 23.882666 29.460335 23.728668 29.184999 23.57 c
28.909666 23.411333 28.655334 23.201334 28.422001 22.940001 c
28.085999 22.557331 27.917999 22.230667 27.917999 21.959999 c
27.917999 21.735998 28.001999 21.502668 28.17 21.26 c
28.263334 21.129333 28.365999 21.063999 28.478001 21.063999 c
28.720669 21.063999 28.984331 21.334663 29.268999 21.875999 c
29.553669 22.417336 29.803331 23.135996 30.018 24.032 c
h
37.872002 26.356001 m
37.797333 26.356001 37.680668 26.386333 37.521999 26.447001 c
37.363331 26.507668 37.242001 26.538 37.158001 26.538 c
37.092667 26.538 37.027332 26.524 36.962002 26.496 c
36.444 26.23 l
36.444 21.441999 l
36.444 21.264666 36.539665 21.036001 36.730999 20.756001 c
36.922333 20.475998 36.999332 20.252001 36.962002 20.084 c
36.915333 19.878666 36.777668 19.715334 36.549 19.594 c
36.320332 19.472666 36.075336 19.412001 35.813999 19.412001 c
35.319332 19.412001 34.978668 19.63133 34.792 20.07 c
34.736 20.200666 34.703335 20.615997 34.694 21.316 c
34.684666 21.782669 34.689335 22.510662 34.708 23.5 c
34.726665 24.620005 34.736 25.329332 34.736 25.628 c
34.68 25.609333 34.586666 25.546333 34.456001 25.438999 c
34.325333 25.331667 34.194668 25.278 34.063999 25.278 c
33.961334 25.278 33.830666 25.306 33.672001 25.362 c
33.018661 25.586 32.692001 25.814665 32.692001 26.048 c
32.692001 26.104 32.706001 26.164667 32.734001 26.23 c
32.799335 26.379333 32.920666 26.463333 33.098 26.482 c
33.368668 26.519333 33.532001 26.552 33.588001 26.58 c
33.80267 26.664 34.194664 26.864666 34.764 27.181999 c
34.764 28.4 l
34.764 28.493334 34.738335 28.616999 34.687 28.771 c
34.635666 28.925001 34.610001 29.039333 34.610001 29.114 c
34.610001 29.198 34.633331 29.277332 34.68 29.351999 c
34.922668 29.725336 35.249332 29.912001 35.66 29.912001 c
36.136002 29.912001 36.472 29.725336 36.667999 29.351999 c
36.742668 29.202665 36.779999 29.081333 36.779999 28.988001 c
36.779999 28.875999 36.723999 28.759335 36.612 28.638 c
36.5 28.516666 36.444 28.404667 36.444 28.302 c
36.444 27.615999 l
36.612 27.690666 36.798664 27.816666 37.004002 27.993999 c
37.162666 28.124668 37.298 28.190001 37.41 28.190001 c
37.456665 28.190001 37.507999 28.180666 37.563999 28.162001 c
38.152004 28.003332 38.445999 27.64867 38.445999 27.098 c
38.445999 26.920666 38.392334 26.752668 38.285 26.594 c
38.177666 26.435333 38.040001 26.356001 37.872002 26.356001 c
h
43.849998 21.469999 m
43.775333 21.115332 43.523335 20.737335 43.094002 20.336 c
43.028667 20.233334 42.772003 20.098001 42.324001 19.93 c
41.810665 19.733999 41.367336 19.65 40.993999 19.677999 c
40.293995 19.724667 39.743336 20.125996 39.341999 20.882 c
38.977997 21.582003 38.796001 22.440662 38.796001 23.458 c
38.796001 24.55934 39.001331 25.52533 39.411999 26.356001 c
39.869335 27.270672 40.480663 27.783998 41.245998 27.896 c
41.395332 27.914667 41.540001 27.924 41.68 27.924 c
42.790672 27.924 43.402 27.242674 43.514 25.879999 c
43.57 25.254663 43.32267 24.573338 42.771999 23.836 c
42.174664 23.023996 41.40934 22.454668 40.476002 22.128 c
40.578667 21.754665 40.658001 21.512001 40.714001 21.4 c
40.844666 21.166666 41.021999 21.049999 41.245998 21.049999 c
41.460667 21.049999 41.689331 21.133999 41.931999 21.302 c
42.137333 21.442001 42.277332 21.577333 42.352001 21.708 c
42.389332 21.726667 42.426666 21.831665 42.464001 22.023001 c
42.501335 22.214334 42.599331 22.351999 42.757999 22.436001 c
42.813999 22.464001 42.879333 22.478001 42.953999 22.478001 c
43.178001 22.478001 43.395 22.368334 43.605 22.149 c
43.815002 21.929667 43.896667 21.703335 43.849998 21.469999 c
h
41.652 26.398001 m
41.278664 26.398001 40.975334 26.132002 40.742001 25.6 c
40.433998 24.890663 40.307999 24.19067 40.363998 23.5 c
40.80267 23.640001 41.208664 23.966663 41.582001 24.48 c
41.955334 24.993336 42.141998 25.450665 42.141998 25.851999 c
42.141998 26.216002 41.978668 26.398001 41.652 26.398001 c
h
50.262001 27.139999 m
50.224667 26.943998 50.047337 26.808666 49.73 26.733999 c
49.356667 26.640667 49.118668 26.533335 49.015999 26.412001 c
46.734001 23.780001 l
46.734001 21.652 l
46.734001 21.446665 46.792332 21.239 46.909 21.028999 c
47.025669 20.818998 47.084 20.658001 47.084 20.546 c
47.084 20.434 47.051334 20.308001 46.986 20.167999 c
46.827332 19.813332 46.505337 19.636 46.02 19.636 c
45.683998 19.636 45.417999 19.743332 45.222 19.958 c
45.091331 20.098001 45.026001 20.275331 45.026001 20.49 c
45.026001 20.564667 45.035332 20.685999 45.054001 20.854 c
45.072666 21.022001 45.082001 21.157333 45.082001 21.26 c
45.082001 26.496 l
45.082001 26.58 45.044666 26.682667 44.970001 26.804001 c
44.895332 26.925333 44.858002 27.023333 44.858002 27.098 c
44.858002 27.153999 44.876667 27.219334 44.914001 27.294001 c
45.035336 27.518002 45.41333 27.629999 46.048 27.629999 c
46.542667 27.629999 46.822666 27.513334 46.888 27.280001 c
46.916 27.186666 46.93 27.107334 46.93 27.042 c
46.93 26.939333 46.892666 26.860001 46.818001 26.804001 c
46.743332 26.747999 46.706001 26.691999 46.706001 26.636 c
46.734001 26.132 l
47.938 27.406 l
48.077999 27.564667 48.224998 27.723333 48.379002 27.882 c
48.533001 28.040667 48.712666 28.129333 48.917999 28.148001 c
49.235336 28.176001 49.541 28.106001 49.834999 27.938 c
50.129002 27.769999 50.276001 27.550669 50.276001 27.280001 c
50.276001 27.233334 50.271332 27.186666 50.262001 27.139999 c
h
W*
0 0 64 64 rc
10.794 34.911999 m
55.276001 34.911999 l
55.276001 14.412 l
10.794 14.412 l
h
f
ep
end
%%Trailer
%%EOF
