%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D102) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 64 64
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 64 64
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
2 w
2 J
0.60000002 i
/Cs1 SC
0.59200001 0.59200001 0.59200001 sc
q
0 0 64 64 rc
1 0 0 -1 16 56.554672 cm
0 16 m
16 0 l
32 16 l
S
Q
0.74117649 0.45882353 0.45882353 sc
q
1 37.006714 m
1 38.107574 1.900351 39 2.9926302 39 c
61.00737 39 l
62.107868 39 63 38.100288 63 37.006714 c
63 11.993287 l
63 10.892426 62.099648 10 61.00737 10 c
2.9926302 10 l
1.892131 10 1 10.899713 1 11.993287 c
1 37.006714 l
h
W*
0 0 64 64 rc
-4 44 m
68 44 l
68 5 l
-4 5 l
h
f
Q
0.98823529 0.76078433 0.29803923 sc
q
3 37 m
61 37 l
61 12 l
3 12 l
3 37 l
h
W*
0 0 64 64 rc
-2 42 m
66 42 l
66 7 l
-2 7 l
h
f
Q
0.67058825 0.37254903 0.37254903 sc
q
10 42 m
20 42 l
20 39 l
10 39 l
10 42 l
h
W*
0 0 64 64 rc
5 47 m
25 47 l
25 34 l
5 34 l
h
f
Q
q
44 42 m
54 42 l
54 39 l
44 39 l
44 42 l
h
W*
0 0 64 64 rc
39 47 m
59 47 l
59 34 l
39 34 l
h
f
Q
0.847 0.847 0.847 sc
q
32 52 m
33.656853 52 35 53.343147 35 55 c
35 56.656853 33.656853 58 32 58 c
30.343145 58 29 56.656853 29 55 c
29 53.343147 30.343145 52 32 52 c
h
W*
0 0 64 64 rc
24 63 m
40 63 l
40 47 l
24 47 l
h
f
Q
0.67058825 0.37254903 0.37254903 sc
q
21.422001 27.139999 m
21.384666 26.943998 21.207335 26.808666 20.889999 26.733999 c
20.516665 26.640667 20.278667 26.533335 20.176001 26.412001 c
17.893999 23.780001 l
17.893999 21.652 l
17.893999 21.446665 17.952333 21.239 18.069 21.028999 c
18.185667 20.818998 18.243999 20.658001 18.243999 20.546 c
18.243999 20.434 18.211334 20.308001 18.146 20.167999 c
17.987333 19.813332 17.665337 19.636 17.18 19.636 c
16.843998 19.636 16.578001 19.743332 16.382 19.958 c
16.251333 20.098001 16.186001 20.275331 16.186001 20.49 c
16.186001 20.564667 16.195333 20.685999 16.214001 20.854 c
16.232666 21.022001 16.242001 21.157333 16.242001 21.26 c
16.242001 26.496 l
16.242001 26.58 16.204666 26.682667 16.129999 26.804001 c
16.055332 26.925333 16.018 27.023333 16.018 27.098 c
16.018 27.153999 16.036667 27.219334 16.073999 27.294001 c
16.195333 27.518002 16.57333 27.629999 17.208 27.629999 c
17.702669 27.629999 17.982666 27.513334 18.048 27.280001 c
18.076 27.186666 18.09 27.107334 18.09 27.042 c
18.09 26.939333 18.052668 26.860001 17.978001 26.804001 c
17.903334 26.747999 17.865999 26.691999 17.865999 26.636 c
17.893999 26.132 l
19.098 27.406 l
19.238001 27.564667 19.384998 27.723333 19.539 27.882 c
19.693001 28.040667 19.872665 28.129333 20.077999 28.148001 c
20.395334 28.176001 20.700998 28.106001 20.995001 27.938 c
21.289001 27.769999 21.436001 27.550669 21.436001 27.280001 c
21.436001 27.233334 21.431334 27.186666 21.422001 27.139999 c
h
26.49 21.469999 m
26.415333 21.115332 26.163336 20.737335 25.733999 20.336 c
25.668667 20.233334 25.412003 20.098001 24.964001 19.93 c
24.450665 19.733999 24.007336 19.65 23.634001 19.677999 c
22.933996 19.724667 22.383335 20.125996 21.982 20.882 c
21.617998 21.582003 21.436001 22.440662 21.436001 23.458 c
21.436001 24.55934 21.641331 25.52533 22.052 26.356001 c
22.509336 27.270672 23.120663 27.783998 23.886 27.896 c
24.035334 27.914667 24.179998 27.924 24.32 27.924 c
25.430672 27.924 26.042 27.242674 26.153999 25.879999 c
26.210001 25.254663 25.962669 24.573338 25.412001 23.836 c
24.814663 23.023996 24.049337 22.454668 23.115999 22.128 c
23.218668 21.754665 23.298 21.512001 23.354 21.4 c
23.484667 21.166666 23.661999 21.049999 23.886 21.049999 c
24.100668 21.049999 24.329332 21.133999 24.572001 21.302 c
24.777334 21.442001 24.917334 21.577333 24.992001 21.708 c
25.029333 21.726667 25.066666 21.831665 25.104 22.023001 c
25.141333 22.214334 25.239332 22.351999 25.398001 22.436001 c
25.454 22.464001 25.519333 22.478001 25.594 22.478001 c
25.818001 22.478001 26.035 22.368334 26.245001 22.149 c
26.455002 21.929667 26.536667 21.703335 26.49 21.469999 c
h
24.292 26.398001 m
23.918665 26.398001 23.615334 26.132002 23.382 25.6 c
23.073999 24.890663 22.948 24.19067 23.004 23.5 c
23.442669 23.640001 23.848665 23.966663 24.222 24.48 c
24.595335 24.993336 24.782 25.450665 24.782 25.851999 c
24.782 26.216002 24.618668 26.398001 24.292 26.398001 c
h
32.369999 21.875999 m
32.369999 21.222664 32.136669 20.665003 31.67 20.202999 c
31.203331 19.740997 30.65267 19.51 30.018 19.51 c
29.616665 19.51 29.201336 19.701332 28.771999 20.084 c
28.435999 20.392002 28.132668 20.769999 27.862 21.218 c
27.628666 21.610003 27.525999 21.857332 27.554001 21.959999 c
27.656668 22.193335 27.978664 22.309999 28.52 22.309999 c
28.744001 22.309999 28.921333 22.277334 29.052 22.212 c
29.276001 22.090666 29.402 21.936668 29.43 21.75 c
29.458 21.535332 29.504667 21.4 29.57 21.344 c
29.766001 21.045332 29.943333 20.896 30.101999 20.896 c
30.223333 20.896 30.337666 20.977665 30.445 21.141001 c
30.552334 21.304335 30.606001 21.497999 30.606001 21.722 c
30.606001 21.862001 30.582666 22.001999 30.535999 22.142 c
30.489332 22.282001 30.237335 22.496666 29.780001 22.785999 c
29.22933 23.131334 28.837334 23.434666 28.604 23.695999 c
28.202665 24.144003 28.002001 24.666664 28.002001 25.264 c
28.002001 25.964003 28.207331 26.577663 28.618 27.105 c
29.028669 27.632336 29.551331 27.896 30.186001 27.896 c
30.839336 27.896 31.338665 27.648668 31.684 27.153999 c
31.964001 26.752665 32.080666 26.346668 32.034 25.936001 c
32.136665 25.823999 32.188 25.637335 32.188 25.375999 c
32.188 25.095999 32.085335 24.858002 31.879999 24.662001 c
31.674665 24.466 31.464668 24.368 31.25 24.368 c
30.932665 24.368 30.657335 24.577997 30.424 24.997999 c
30.358665 25.110001 30.326 25.259333 30.326 25.445999 c
30.326 25.530001 30.333 25.649 30.347 25.802999 c
30.361 25.957001 30.368 26.066666 30.368 26.132 c
30.368 26.374668 30.279335 26.496 30.101999 26.496 c
29.831331 26.496 29.695999 26.230003 29.695999 25.698 c
29.695999 25.156664 29.873331 24.722668 30.228001 24.396 c
30.368 24.265333 30.671331 24.078669 31.138 23.836 c
31.539335 23.630665 31.823999 23.420668 31.992001 23.205999 c
32.243999 22.879332 32.369999 22.436003 32.369999 21.875999 c
h
37.844002 27.224001 m
38.469337 26.589331 38.782001 25.520674 38.782001 24.018 c
38.782001 22.851328 38.562668 21.857338 38.124001 21.035999 c
37.62933 20.111996 36.948006 19.65 36.080002 19.65 c
35.221329 19.65 34.55867 20.065329 34.091999 20.896 c
33.681332 21.624004 33.476002 22.547995 33.476002 23.667999 c
33.476002 24.657339 33.634666 25.543997 33.952 26.327999 c
34.288002 27.168005 34.717331 27.662666 35.240002 27.812 c
35.51067 27.886667 35.790665 27.924 36.080002 27.924 c
36.798672 27.924 37.386665 27.690668 37.844002 27.224001 c
h
36.248001 26.552 m
35.939999 26.58 35.674 26.29067 35.450001 25.684 c
35.253998 25.133331 35.155998 24.55467 35.155998 23.948 c
35.155998 23.070662 35.193333 22.450003 35.268002 22.086 c
35.398666 21.432663 35.669331 21.073334 36.080002 21.007999 c
36.341335 20.970667 36.584 21.329996 36.807999 22.086 c
37.022667 22.814003 37.130001 23.593328 37.130001 24.424 c
37.130001 25.786673 36.836002 26.496 36.248001 26.552 c
h
45.222 27.139999 m
45.184666 26.943998 45.007336 26.808666 44.689999 26.733999 c
44.316666 26.640667 44.078667 26.533335 43.976002 26.412001 c
41.694 23.780001 l
41.694 21.652 l
41.694 21.446665 41.752335 21.239 41.868999 21.028999 c
41.985668 20.818998 42.043999 20.658001 42.043999 20.546 c
42.043999 20.434 42.011333 20.308001 41.945999 20.167999 c
41.787334 19.813332 41.465336 19.636 40.98 19.636 c
40.643997 19.636 40.378002 19.743332 40.181999 19.958 c
40.051334 20.098001 39.986 20.275331 39.986 20.49 c
39.986 20.564667 39.995335 20.685999 40.014 20.854 c
40.032665 21.022001 40.042 21.157333 40.042 21.26 c
40.042 26.496 l
40.042 26.58 40.004665 26.682667 39.93 26.804001 c
39.855331 26.925333 39.818001 27.023333 39.818001 27.098 c
39.818001 27.153999 39.836666 27.219334 39.874001 27.294001 c
39.995335 27.518002 40.373329 27.629999 41.007999 27.629999 c
41.50267 27.629999 41.782665 27.513334 41.848 27.280001 c
41.875999 27.186666 41.889999 27.107334 41.889999 27.042 c
41.889999 26.939333 41.852669 26.860001 41.778 26.804001 c
41.703335 26.747999 41.666 26.691999 41.666 26.636 c
41.694 26.132 l
42.897999 27.406 l
43.038002 27.564667 43.184998 27.723333 43.339001 27.882 c
43.493 28.040667 43.672665 28.129333 43.877998 28.148001 c
44.195335 28.176001 44.500999 28.106001 44.794998 27.938 c
45.089001 27.769999 45.236 27.550669 45.236 27.280001 c
45.236 27.233334 45.231335 27.186666 45.222 27.139999 c
h
50.066002 26.356001 m
49.991333 26.356001 49.874668 26.386333 49.716 26.447001 c
49.557331 26.507668 49.436001 26.538 49.352001 26.538 c
49.286667 26.538 49.221333 26.524 49.155998 26.496 c
48.638 26.23 l
48.638 21.441999 l
48.638 21.264666 48.733665 21.036001 48.924999 20.756001 c
49.116333 20.475998 49.193333 20.252001 49.155998 20.084 c
49.109333 19.878666 48.971668 19.715334 48.743 19.594 c
48.514332 19.472666 48.269333 19.412001 48.007999 19.412001 c
47.513332 19.412001 47.172668 19.63133 46.986 20.07 c
46.93 20.200666 46.897335 20.615997 46.888 21.316 c
46.878666 21.782669 46.883335 22.510662 46.902 23.5 c
46.920666 24.620005 46.93 25.329332 46.93 25.628 c
46.874001 25.609333 46.780666 25.546333 46.650002 25.438999 c
46.519333 25.331667 46.388668 25.278 46.257999 25.278 c
46.155334 25.278 46.024666 25.306 45.866001 25.362 c
45.212662 25.586 44.886002 25.814665 44.886002 26.048 c
44.886002 26.104 44.900002 26.164667 44.928001 26.23 c
44.993332 26.379333 45.114666 26.463333 45.292 26.482 c
45.562668 26.519333 45.725998 26.552 45.782001 26.58 c
45.996666 26.664 46.388664 26.864666 46.958 27.181999 c
46.958 28.4 l
46.958 28.493334 46.932335 28.616999 46.881001 28.771 c
46.829666 28.925001 46.804001 29.039333 46.804001 29.114 c
46.804001 29.198 46.827332 29.277332 46.874001 29.351999 c
47.116669 29.725336 47.443333 29.912001 47.854 29.912001 c
48.330002 29.912001 48.666 29.725336 48.862 29.351999 c
48.936668 29.202665 48.973999 29.081333 48.973999 28.988001 c
48.973999 28.875999 48.917999 28.759335 48.806 28.638 c
48.694 28.516666 48.638 28.404667 48.638 28.302 c
48.638 27.615999 l
48.806 27.690666 48.992664 27.816666 49.198002 27.993999 c
49.356667 28.124668 49.492001 28.190001 49.604 28.190001 c
49.650665 28.190001 49.702 28.180666 49.757999 28.162001 c
50.346004 28.003332 50.639999 27.64867 50.639999 27.098 c
50.639999 26.920666 50.586334 26.752668 50.479 26.594 c
50.371666 26.435333 50.234001 26.356001 50.066002 26.356001 c
h
W*
0 0 64 64 rc
11.018 34.911999 m
55.639999 34.911999 l
55.639999 14.412 l
11.018 14.412 l
h
f
ep
end
%%Trailer
%%EOF
